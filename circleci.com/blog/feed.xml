<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xml:base="https://circleci.com/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The CircleCI Blog Feed - CircleCI</title>
    <description>Stay up to date with the latest news, updates, and hacks from CircleCI.</description>
    <link>https://circleci.com/blog/</link>
    <atom:link href="https://circleci.com/blog/feed.xml" rel="self" type="application/rss+xml" />
    
      
      <item>
        <title>Continuous deployment for progressive web applications</title>
        <link>https://circleci.com/blog/cd-for-pwa/</link>
        <pubDate>Mon, 08 Jun 2020 14:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/cd-for-pwa/</guid>
        
          <dc:creator>Fikayo Adepoju</dc:creator>
        
        
          <description>&lt;p&gt;&lt;a href=&quot;https://web.dev/progressive-web-apps/&quot;&gt;Progressive web applications (PWAs)&lt;/a&gt; continue to gain widespread attention, acceptance, and compatibility with web browsers due to their native-like attributes. One of the mandatory security considerations to deploying these applications is that they must be hosted securely. Due to this, PWA features will not work on a non-secure URL, i.e. a URL that does not use the secure &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; protocol. In this post, we will be create an automated deployment pipeline that deploys our PWA to a secure URL on &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;To follow this post, a few things are required:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Basic knowledge of Javascript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; installed on your system&lt;/li&gt;
  &lt;li&gt;An &lt;a href=&quot;https://www.npmjs.com/package/http-server&quot;&gt;HTTP Server Module&lt;/a&gt; installed globally on your system (&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g http-server&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase&lt;/a&gt; account&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt; account&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With all these installed and set up, let’s begin the tutorial.&lt;/p&gt;

&lt;h2&gt;Setting up the demo application&lt;/h2&gt;

&lt;p&gt;The first task is to create our demo application that we will be deploying to Firebase. Run the following commands to create a directory for the project and go into the root of the directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir my-pwa-firebase
cd my-pwa-firebase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, let’s create our application home page. Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; at the root of the project and paste the following code into it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;manifest.json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;theme-color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#db4938&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;styles.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;DogVille&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
      Welcome to the home of Dogs
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog-list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog-pic&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/dog1.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog-pic&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/dog2.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog-pic&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/dog3.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dog-pic&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;images/dog4.jpg&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the home page file above, we link to three files: &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; which we will use to set up the &lt;strong&gt;Add to Home Screen&lt;/strong&gt; PWA feature, &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.css&lt;/code&gt; to apply some basic styling to our page, and &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; which will load in the service worker that we haven’t created yet, but will shortly. In the body of our page, we have a title that reads &lt;strong&gt;Welcome to the home of Dogs&lt;/strong&gt; and below it, we display a list of dog pictures. As you can see, this is a dog site (apologies to the cat lovers).&lt;/p&gt;

&lt;p&gt;The dog images are contained in an &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; folder at the root of the project. I have referenced the dog pictures in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; according to the filenames used in &lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt;. Go ahead and create this folder, you can download dog pictures for free &lt;a href=&quot;https://pixabay.com/images/search/dog/&quot;&gt;here&lt;/a&gt; and rename them appropriately.&lt;/p&gt;

&lt;p&gt;Let’s add styles by creating the file &lt;code class=&quot;highlighter-rouge&quot;&gt;styles.css&lt;/code&gt; at the root of our project and pasting the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
  background-color: orange;
}

h2 {
  color: white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file gives our page background color and makes the title text white. Let’s take our app for a spin by running the following command at the root of the project to invoke the global &lt;code class=&quot;highlighter-rouge&quot;&gt;http-server&lt;/code&gt; module to spin up a local server to serve our app:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see a screen similar to the one below when you load the URL in your browser (your dogs will likely be different from mine):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-app-first-view.png&quot; alt=&quot;App first view&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Adding a service worker&lt;/h2&gt;

&lt;p&gt;Now, let’s add the juice of PWAs, the &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/service-workers&quot;&gt;service worker&lt;/a&gt;. Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;serviceworker.js&lt;/code&gt; file at the root of your project and paste the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cacheName = &quot;sw-v1&quot;;
var filesToCache = [
  &quot;./&quot;,
  &quot;./index.html&quot;,
  &quot;./styles.css&quot;,
  &quot;./app.js&quot;,
  &quot;./images/dog1.jpg&quot;,
  &quot;./images/dog2.jpg&quot;,
  &quot;./images/dog3.jpg&quot;,
  &quot;./images/dog4.jpg&quot;
];

self.addEventListener(&quot;install&quot;, function (e) {
  console.log(&quot;&amp;lt;ServiceWorker&amp;gt; ---- Install v1&quot;);
  e.waitUntil(
    caches.open(cacheName).then(function (cache) {
      console.log(&quot;&amp;lt;ServiceWorker&amp;gt; --- Caching app shell&quot;);
      return cache.addAll(filesToCache);
    })
  );
});

self.addEventListener(&quot;activate&quot;, (event) =&amp;gt; {
  event.waitUntil(self.clients.claim());
});

self.addEventListener(&quot;fetch&quot;, function (event) {
  event.respondWith(
    caches.match(event.request).then(function (response) {
      if (response) {
        return response;
      }
      return fetch(event.request);
    })
  );
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our service worker file above, we cache all our static files including our project root and our images. We then listen for the &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; event to install our service worker and create a cache for these files using the specified &lt;code class=&quot;highlighter-rouge&quot;&gt;cacheName&lt;/code&gt; as the identifier.&lt;/p&gt;

&lt;p&gt;Next, we listen to the &lt;code class=&quot;highlighter-rouge&quot;&gt;activate&lt;/code&gt; event to ensure that any new service worker that has been installed is the one serving our cache and not an old version.&lt;/p&gt;

&lt;p&gt;Finally, we listen to the &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; event to intercept any requests and check whether we already have the requested resource in our cache. If so, we serve the cached version, and if not we make a new request to fetch the resource.&lt;/p&gt;

&lt;p&gt;Now, let’s load our service worker file into our application. Create an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file at the root of the project and paste the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
if (&quot;serviceWorker&quot; in navigator) {
  window.addEventListener(&quot;load&quot;, function () {
    navigator.serviceWorker.register(&quot;./serviceworker.js&quot;).then(
      function (registration) {
        console.log(&quot;Hurray! Service workers with scope: &quot;, registration.scope);
      },
      function (err) {
        console.log(&quot;Oops! ServiceWorker registration failed: &quot;, err);
      }
    );
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s take our service worker for a spin. Make sure that your app is still running, then do a hard reload on the browser tab where the application is currently loaded (&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + Shift + R&lt;/code&gt;). Now check the browser console to see the console log messages we wrote to confirm the installation of the service worker. You will see the following messages in your console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-sw-installed.png&quot; alt=&quot;Service Worker Installation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To confirm that we now have offline capabilities with our service worker installed, shut down the &lt;code class=&quot;highlighter-rouge&quot;&gt;http-server&lt;/code&gt; service with &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + C&lt;/code&gt;, then refresh the application on the browser. You would usually see the offline page at this point because the application is no longer running, but with the magic that is a service worker, you can still see your application home page. Also notice that all dog pictures are loading offline.&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;h2&gt;Adding a manifest file&lt;/h2&gt;

&lt;p&gt;Let’s wrap up our demo application by creating our &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file at the root of the project. You can generate a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file with icons &lt;a href=&quot;https://app-manifest.firebaseapp.com/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is the code in my &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; file. 
&lt;strong&gt;Note&lt;/strong&gt;: &lt;i&gt;I have removed some icons in my example.&lt;/i&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;name&quot;: &quot;my-dogsite-pwa&quot;,
  &quot;short_name&quot;: &quot;my-dogsite-pwa&quot;,
  &quot;theme_color&quot;: &quot;#000000&quot;,
  &quot;background_color&quot;: &quot;#ffffff&quot;,
  &quot;display&quot;: &quot;standalone&quot;,
  &quot;orientation&quot;: &quot;portrait&quot;,
  &quot;scope&quot;: &quot;/index.html&quot;,
  &quot;start_url&quot;: &quot;/index.html&quot;,
  &quot;icons&quot;: [
    {
      &quot;src&quot;: &quot;icons/icon-128x128.png&quot;,
      &quot;sizes&quot;: &quot;128x128&quot;,
      &quot;type&quot;: &quot;image/png&quot;
    },
    {
      &quot;src&quot;: &quot;icons/icon-144x144.png&quot;,
      &quot;sizes&quot;: &quot;144x144&quot;,
      &quot;type&quot;: &quot;image/png&quot;
    },
    {
      &quot;src&quot;: &quot;icons/icon-152x152.png&quot;,
      &quot;sizes&quot;: &quot;152x152&quot;,
      &quot;type&quot;: &quot;image/png&quot;
    },
    {
      &quot;src&quot;: &quot;icons/icon-192x192.png&quot;,
      &quot;sizes&quot;: &quot;192x192&quot;,
      &quot;type&quot;: &quot;image/png&quot;
    },
    {
      &quot;src&quot;: &quot;icons/icon-512x512.png&quot;,
      &quot;sizes&quot;: &quot;512x512&quot;,
      &quot;type&quot;: &quot;image/png&quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above file, the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; of the application, the &lt;code class=&quot;highlighter-rouge&quot;&gt;short name&lt;/code&gt; , the preferred &lt;code class=&quot;highlighter-rouge&quot;&gt;orientation&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;theme_color&lt;/code&gt; for the app bar, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;background_color&lt;/code&gt; for the splash screen are defined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;i&gt;It is a best practice to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;short_name&lt;/code&gt;, an optional field that specifies the name that will be displayed in the app launcher or a new tab page. Otherwise, the &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; will be used, and it will be truncated if it is more than 12 characters long.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;icons&lt;/code&gt; array is also added with a collection of icon object definitions that point to the icons we will be using for our PWA. Remember to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;icons&lt;/code&gt; folder and fill it with the icons named in the manifest file.&lt;/p&gt;

&lt;h2&gt;Setting up deployment to Firebase&lt;/h2&gt;

&lt;p&gt;Now that our PWA is complete, let’s begin preparing it for deployment to Firebase. You need to have Firebase tools installed. To check that you have it installed, run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firebase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will return a list of Firebase commands to your CLI. If it doesn’t, you need to run the following command to get it installed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g firebase-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also need to run the above command if your &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-tools&lt;/code&gt; is less than version 8. To check your &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-tools&lt;/code&gt; version, run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firebase --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To set up Firebase hosting for our project, we need to create a Firebase project. Head over to your &lt;a href=&quot;https://console.firebase.google.com/&quot;&gt;Firebase console&lt;/a&gt; and create a new Firebase project.&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Project&lt;/code&gt; and enter the name of your project in the first page that pops up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-firebase-project-1.png&quot; alt=&quot;Create Firebase Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt; and on the next page about adding &lt;strong&gt;Google Analytics&lt;/strong&gt;, turn off the &lt;code class=&quot;highlighter-rouge&quot;&gt;Enable Google Analytics for this project&lt;/code&gt; toggle button. Since this is a demo project, we won’t be needing analytics.&lt;/p&gt;

&lt;p&gt;Now click &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Project&lt;/code&gt;. Wait for Firebase to complete setting up your project then click &lt;code class=&quot;highlighter-rouge&quot;&gt;Continue&lt;/code&gt; to navigate to your project dashboard.&lt;/p&gt;

&lt;p&gt;Now that we have our project set up, the next step is to set up our PWA to be hosted on Firebase using the project we just created. Stay logged into Firebase on your default browser, then go to your CLI to run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firebase login:ci
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command will log you into Firebase by redirecting to your browser where you’re currently logged in. Once the authentication process is complete, your Firebase token will be printed on the screen just below the line that reads &lt;code class=&quot;highlighter-rouge&quot;&gt;✔ Success! Use this token to login on a CI server&lt;/code&gt;. Save this token securely because you will need it later on in this tutorial.&lt;/p&gt;

&lt;p&gt;Next, run the following command at the root of your PWA project to initialize the Firebase setup:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;firebase init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first prompt you will get from this command is &lt;code class=&quot;highlighter-rouge&quot;&gt;? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices.&lt;/code&gt;. Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Hosting&lt;/code&gt; option using the arrow keys, hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Spacebar&lt;/code&gt; to select, and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to go to the next prompt.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-select-features.png&quot; alt=&quot;Select Project Features&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next prompts is to associate your local project with a Firebase project on your Firebase account. From here, you can choose to use an existing project or create a new one. Select &lt;code class=&quot;highlighter-rouge&quot;&gt;Use an existing project&lt;/code&gt; and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to move to the next prompt. This selection will prompt the CLI tool to load your Firebase projects for you to select from in the next prompt. I am selecting the project we just created on our Firebase console.&lt;/p&gt;

&lt;p&gt;Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to confirm your selection.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-select-project.png&quot; alt=&quot;Select Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next prompt asks for the project folder and suggests the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;. For our project, everything is taking place at the root, so simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt; to proceed.&lt;/p&gt;

&lt;p&gt;The next prompt is &lt;code class=&quot;highlighter-rouge&quot;&gt;? Configure as a single-page app (rewrite all urls to /index.html)?&lt;/code&gt;. As our entire application resides within &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, type &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;. This prompt is important for distinguishing between single-page apps and traditional multi-page apps so that Firebase Hosting knows how to handle them.&lt;/p&gt;

&lt;p&gt;The next prompt detects that we already have an &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file and asks if it should be overwritten. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; for this and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;. This completes the setup and you will now have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.firebaserc&lt;/code&gt; file which sets the project id for this application, a &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase.json&lt;/code&gt; file which contains details about the options we selected during the set up process and some other default settings, and a standard &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file for Firebase.&lt;/p&gt;

&lt;p&gt;With this, we can now proceed to creating our deployment pipeline.&lt;/p&gt;

&lt;h2&gt;Building the CD pipeline&lt;/h2&gt;

&lt;p&gt;To set up our automated deployment pipeline, we need to take the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Push our project to a remote repository (GitHub in this case) connected to our CircleCI account&lt;/li&gt;
  &lt;li&gt;Add our application as a new project on CircleCI&lt;/li&gt;
  &lt;li&gt;Add our Firebase token as an environment variable to our CircleCI project&lt;/li&gt;
  &lt;li&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-tools&lt;/code&gt; locally in the project&lt;/li&gt;
  &lt;li&gt;Create our pipeline confirguration file&lt;/li&gt;
  &lt;li&gt;Push project changes to our repository to initiate deployment&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s begin. Scaffold a quick &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Initialize the project folder as a &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; repository and push to your remote repository.&lt;/p&gt;

&lt;p&gt;The next step is to set up the repository for our project as a CircleCI project.&lt;/p&gt;

&lt;p&gt;On the CircleCI console, go to the &lt;strong&gt;Add Projects&lt;/strong&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-add-project.png&quot; alt=&quot;Add Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Set Up Project&lt;/strong&gt;. This will load the next screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/start-building1.png&quot; alt=&quot;Start Building - Config sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the setup page, click &lt;strong&gt;Start Building&lt;/strong&gt;. Before the build starts, you get a prompt to either download and use the provided CircleCI configuration file and have it on a separate branch or to set one up manually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-start-building2.png&quot; alt=&quot;Start Building - Add manually&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Add Manually&lt;/strong&gt; to proceed. This will prompt another dialog that checks to confirm that you have a configuration file set up to begin building.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-start-building3.png&quot; alt=&quot;Start Building - Confirm configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Start Building&lt;/strong&gt; to complete the setup. This will immediately trigger the pipeline. The build will fail because we haven’t added our pipeline configuration file.&lt;/p&gt;

&lt;p&gt;Our next step is to add our Firebase token as an environment variable in the CircleCI project we just created. On the &lt;strong&gt;Pipelines&lt;/strong&gt; page, with our project selected, click &lt;strong&gt;Project Settings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-project-settings.png&quot; alt=&quot;Project Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the settings page side-menu, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment Variables&lt;/code&gt;. On the variables set up page, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Environment Variable&lt;/code&gt;. A dialog box will appear. In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Name*&lt;/code&gt; field, enter &lt;code class=&quot;highlighter-rouge&quot;&gt;FIREBASE_TOKEN&lt;/code&gt;, and in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Value*&lt;/code&gt; field, paste in the Firebase token you got from your CLI in the step above. Click &lt;strong&gt;Submit&lt;/strong&gt; to complete the process. You now have the token variable registered.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-firebase-token.png&quot; alt=&quot;Project Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Return to the PWA project on your system. Run the following command to install &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-tools&lt;/code&gt; at the root of the project so you can have it registered in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; as a development dependency:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -D firebase-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that process is complete, its time to create our deployment configuration file. At the root of your project, create a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci&lt;/code&gt;, and in it a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt;. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file, enter the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10.16.0
    working_directory: ~/repo
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum &quot;package.json&quot; }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: npm install
      - save_cache:
          key: v1-npm-deps-{{ checksum &quot;package-lock.json&quot; }}
          paths:
            - ./node_modules
      - run:
          name: Deploy to Firebase
          command: ./node_modules/.bin/firebase deploy --token &quot;$FIREBASE_TOKEN&quot; --only hosting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the configuration file above, we start by checking out the project from our remote repository. We then install our dependencies, cache them, and run our &lt;code class=&quot;highlighter-rouge&quot;&gt;firebase-tools&lt;/code&gt; from the local installation to use our Firebase token to deploy our application.&lt;/p&gt;

&lt;p&gt;Now the moment of truth. Let’s commit our changes and push them to our repository to cause our deployment script to be triggered and deploy our application to Firebase hosting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-build-success.png&quot; alt=&quot;Build success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click into the build to see the behind-the-scenes of the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-build-process.png&quot; alt=&quot;Build Process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From the &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy to Firebase&lt;/code&gt; section. You can see the URL of the deployed application. For this exercise, it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;https://my-dog-site-pwa.web.app&lt;/code&gt;. Load yours into your browser to test your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-08-pwa-live.png&quot; alt=&quot;Live Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, the address bar is loading our Firebase URL, and we can see console messages indicating that our service worker is installed. If you turn off your network and refresh this page, you will see that the application, with all the dog pictures and styling, loads instead of the usual offline screen.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Setting up SSL certificates for &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; URLs is not a task most developers enjoy. Sometimes this leads to reluctance in adopting PWAs. However in this post, we have demonstrated how to set up an automated &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continuous integreation&lt;/a&gt; / continuous deployment pipeline for secured hosting of PWAs with CircleCI and Firebase.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/coderonfleek?lang=en&quot;&gt;Fikayo&lt;/a&gt; is a fullstack developer and author with over a decade of experience developing web and mobile solutions. He is currently the Software Lead at Tech Specialist Consulting and develops courses for Packt and Udemy. He has a strong passion for teaching and hopes to become a full-time author.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>Automatic testing for GraphQL APIs</title>
        <link>https://circleci.com/blog/automatic-testing-for-graphql-apis/</link>
        <pubDate>Fri, 05 Jun 2020 15:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/automatic-testing-for-graphql-apis/</guid>
        
          <dc:creator>Fikayo Adepoju</dc:creator>
        
        
          <description>&lt;p&gt;&lt;i&gt;This post, written by guest writer Fikayo Adepoju, was originally published on The New Stack &lt;a href=&quot;https://thenewstack.io/automatic-testing-for-graphql-apis/&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; is quickly becoming a preferred alternative to the traditional REST architecture API developers have been using for many years. It gives front-end developers the ability to query only what they need through a single endpoint. Because of its numerous benefits, back-end developers are adapting industry-standard strategies to ensure they build fluent and scalable APIs in GraphQL.&lt;/p&gt;

&lt;p&gt;One of those standards is having a well-tested GraphQL API. In this post, we will take a look at how to test GraphQL APIs and automate the testing process with CircleCI.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;To follow along with this post, you will need the following already set up:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basic knowledge of GraphQL&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; installed on your system (you can confirm this by running the node -v command on your terminal to print out the version of Node.js installed)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; installed on your system (you can confirm this by running the git command on your terminal; this should print out available git commands)&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; account&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://circleci.com&quot;&gt;CircleCI&lt;/a&gt; account&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Creating the GraphQL server&lt;/h2&gt;
&lt;p&gt;Our first task is to set up a simple GraphQL server using Node.js. Create a folder for the project by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir testing-graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now go into the project root by running this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd testing-graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run the following command to quickly set up your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will quickly scaffold a basic &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To set up our GraphQL server, we will need the following packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;express&lt;/strong&gt;: to create our ExpressJS node application&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;graphql&lt;/strong&gt;: the GraphQL npm package for Node.js&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;express-graphql&lt;/strong&gt;: ExpressJS middleware for GraphQL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run the following command to install these packages:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save express graphql express-graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once these packages are installed we can then start building the application.&lt;/p&gt;

&lt;p&gt;We will build an API similar to that used by a blog that publishes posts from multiple users.&lt;/p&gt;

&lt;h2&gt;Defining the GraphQL schema&lt;/h2&gt;

&lt;p&gt;Let’s begin putting together the application by first defining our GraphQL schema. At the root of your project, create a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt;; this is where all of our application logic will be located. Within the src folder, create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;schema.js&lt;/code&gt; and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/schema.js */

const { buildSchema } = require(&quot;graphql&quot;);

const schema = buildSchema(`
    type Query {
        users: [User!]!,
        user(id: Int!): User!
    }

    type User {
        id: ID!
        name: String!
        email: String
        posts: [Post!]
    }

    type Post {
        id: ID!
        title: String!
        published: Boolean!
        link: String
        author: User!
    }
`);

module.exports = schema;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we define two custom types: &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Post&lt;/code&gt;. These represent the blog user and their posts, respectively.&lt;/p&gt;

&lt;p&gt;We also defined our &lt;code class=&quot;highlighter-rouge&quot;&gt;Query&lt;/code&gt; type to have two queries. The &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; query returns an array of users and the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; query returns a single user whose &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; matches the argument.&lt;/p&gt;

&lt;p&gt;Finally, we export the schema on the last line.&lt;/p&gt;

&lt;h2&gt;Mocking data&lt;/h2&gt;

&lt;p&gt;Since this is not a production application, we will not be using a real database for our data. Instead, we will be creating a mock of the &lt;a href=&quot;https://www.mongodb.com/&quot;&gt;MongoDB&lt;/a&gt; database using the &lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb-memory-server&lt;/code&gt;. This will allow us to create and use an in-memory instance of MongoDB. In production, you would want to &lt;a href=&quot;https://www.codeproject.com/Articles/1231623/How-to-Configure-Node-js-and-MongoDB-for-Productio&quot;&gt;set up an actual MongoDB instance&lt;/a&gt; or use a MongoDB service like &lt;a href=&quot;https://mlab.com/&quot;&gt;Mlab&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s install the required packages by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save mongodb mongodb-memory-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the packages are done installing, the next step is to create a file to hold our mock data.
Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, create a file with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;data.js&lt;/code&gt; and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/data.js */

const Users = [
  {
    id: 1,
    name: &quot;Fikayo Adepoju&quot;,
    email: &quot;fik4christ@yahoo.com&quot;,
    posts: [
      {
        id: 1,
        title: &quot;Creating an Emoji Game with Vue, Auth0, and Google Vision API&quot;,
        published: true,
        link:
          &quot;https://auth0.com/blog/creating-an-emoji-game-with-vue-auth0-and-google-vision-api/&quot;,
        author: 1
      },
      {
        id: 2,
        title: &quot;Electron Tutorial: Building Modern Desktop Apps with Vue.js&quot;,
        published: true,
        link:
          &quot;https://auth0.com/blog/electron-tutorial-building-modern-desktop-apps-with-vue-js/&quot;,
        author: 1
      },
      {
        id: 3,
        title: &quot;State Management with Vuex: a Practical Tutorial&quot;,
        published: true,
        link:
          &quot;https://auth0.com/blog/state-management-with-vuex-a-practical-tutorial/&quot;,
        author: 1
      }
    ]
  },
  {
    id: 2,
    name: &quot;John Doe&quot;,
    email: &quot;john@company.com&quot;,
    posts: [
      {
        id: 4,
        title: &quot;Build a CI powered RESTful API with Laravel&quot;,
        published: true,
        link:
          &quot;https://circleci.com/blog/build-a-ci-powered-restful-api-with-laravel/&quot;,
        author: 2
      },
      {
        id: 5,
        title: &quot;Automate your Nuxt.js app deployment&quot;,
        published: true,
        link: &quot;https://circleci.com/blog/automate-your-nuxt-js-app-deployment/&quot;,
        author: 2
      }
    ]
  },
  {
    id: 3,
    name: &quot;Jane Paul&quot;,
    email: &quot;jane@company.com&quot;,
    posts: []
  }
];



module.exports = {
  Users
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The file above exports an object, which contains an array of user data. Each user object also contains an array of that user’s posts. This is the data for bootstrapping our in-memory MongoDB instance.&lt;/p&gt;

&lt;p&gt;The next step in mocking our data is setting up our database instance using the &lt;code class=&quot;highlighter-rouge&quot;&gt;mongodb-memory-server&lt;/code&gt; package. Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;database.js&lt;/code&gt; also in the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* src/database.js */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MongoMemoryServer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb-memory-server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MongoClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;mongo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MongoMemoryServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;mongoDBURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getConnectionString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MongoClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mongoDBURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;useNewUrlParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//Seed Database&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertMany&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stopDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mongo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;startDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;stopDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we export a &lt;code class=&quot;highlighter-rouge&quot;&gt;startDatabase&lt;/code&gt; function that sets up our in-memory MongoDB database.&lt;/p&gt;

&lt;p&gt;It checks if an instance of the database already exists. If it doesn’t, it bootstraps it with a users collection and seeds the collection with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Users&lt;/code&gt; array we defined earlier in our &lt;code class=&quot;highlighter-rouge&quot;&gt;data.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;Defining our resolvers&lt;/h2&gt;

&lt;p&gt;The next task is to define the resolvers to our queries. Remember we defined the two queries &lt;code class=&quot;highlighter-rouge&quot;&gt;users&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; to return an array of users and a single user, respectively.&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder, create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;resolvers.js&lt;/code&gt; and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/resolvers.js */

const resolvers = {
  users: async (_, context) =&amp;gt; {
    const { db } = await context();
    return db
      .collection(&quot;users&quot;)
      .find()
      .toArray();
  },
  user: async ({ id }, context) =&amp;gt; {
    const { db } = await context();
    return db.collection(&quot;users&quot;).findOne({ id });
  }
  
};

module.exports = resolvers;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we export an object containing two resolvers — one for each of our queries. We also use the context object, which we will set up later on.&lt;/p&gt;

&lt;h2&gt;Preparing the application for tests&lt;/h2&gt;

&lt;p&gt;You might be asking at this point, “Why are we setting up tests when we haven’t even wired up our GraphQL server to start up and receive requests?”&lt;/p&gt;

&lt;p&gt;The answer to that is as follows. Most developers set up the server application and listen for connections in the same file; this file is the entry point of the application as seen below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//Setup server
const express = require(&quot;express&quot;);

const app = express()

/* More server Logic */


//Listen on a port

const port = process.env.PORT || &quot;4000&quot;;

app.listen(port);

console.log(`🚀 Server ready at http://localhost:${port}/graphql`);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But, in order to test our GraphQL endpoints, the server setup logic and the part where we listen on a port needs to be in separate files. One file holds our server logic and exports the server app, and another file boots up our application.&lt;/p&gt;

&lt;p&gt;This way, we can import our server into our test files and run the appropriate tests on it.&lt;/p&gt;

&lt;p&gt;Before we create these files, go ahead and install the &lt;code class=&quot;highlighter-rouge&quot;&gt;graphql-playground-middleware-express&lt;/code&gt; module, which helps us set up a classy playground for testing our GraphQL endpoints:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install graphql-playground-middleware-express
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s create these files for our GraphQL server. Within the src folder, create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt; and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/server.js */

const express = require(&quot;express&quot;);
const graphqlHTTP = require(&quot;express-graphql&quot;);
const schema = require(&quot;./schema&quot;);
const resolvers = require(&quot;./resolvers&quot;);
const { startDatabase } = require(&quot;./database&quot;);
const expressPlayground = require(&quot;graphql-playground-middleware-express&quot;)
  .default;

// Create a context for holding contextual data (db info in this case)
const context = async () =&amp;gt; {
  const db = await startDatabase();

  return { db };
};

const app = express();

app.use(
  &quot;/graphql&quot;,
  graphqlHTTP({
    schema,
    rootValue: resolvers,
    context,
  })
);

//Graphql Playground route
app.get(&quot;/playground&quot;, expressPlayground({ endpoint: &quot;/graphql&quot; }));

module.exports = app;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we set up our Node.js application, our GraphQL context to contain an instance of our in-memory database, our server GraphQL endpoint, and GraphQL playground endpoint. We then export our app.&lt;/p&gt;

&lt;p&gt;The next step is to create the file to boot up the server. Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; and place the following code in it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/index.js */

const app = require(&quot;./server&quot;);

const port = process.env.PORT || &quot;4000&quot;;

app.listen(port);

console.log(`🚀 Server ready at http://localhost:${port}/graphql`);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we set up the startup script by importing our server and listening on a port.&lt;/p&gt;

&lt;p&gt;Our application is now ready to function. Let’s add a start script to &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; to run the application:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* package.json */
…..
“scripts” : {
	“start” : “node src/index.js”
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s take the app for a spin by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running this command, you will see the success message logged to your console. To test that the server is running, navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;http://localhost:4000/playground&lt;/code&gt; to open up the playground.&lt;/p&gt;

&lt;p&gt;In the query window of the playground, run the following query:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    users {
    	name
     	email
    	posts {
      	    title
      	    published
    	}
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should give you the output shown below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Now we have visual and functional confirmation that our GraphQL server is working as expected.&lt;/p&gt;

&lt;p&gt;We are not here because we want to test our endpoints manually through the playground, though. No, no, no. We are here for automated testing and that’s what we are going to enable in the next section. Before then, make sure to push this project to a GitHub repo. Set up a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file to ignore the &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; folder before pushing your code to your repo.&lt;/p&gt;

&lt;h2&gt;Setting up the test script&lt;/h2&gt;
&lt;p&gt;We want to add tests to our application and include a test script that runs all of our tests whenever we push code to our repo. Pretty neat, right? Let’s go ahead and set that up.&lt;/p&gt;

&lt;p&gt;First, we need a testing framework. The framework we will be using in this post is &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why Jest? Because it’s easy to set up (almost requires no setup at all) and has a fluent, comprehensible API.&lt;/p&gt;

&lt;p&gt;We also need a library for testing HTTP endpoints, and for this we will be using the &lt;a href=&quot;https://www.npmjs.com/package/supertest&quot;&gt;Supertest&lt;/a&gt; npm library. Supertest is an easy-to-use HTTP testing library that works seamlessly with any testing framework.&lt;/p&gt;

&lt;p&gt;We will be combining the Jest testing framework with the supertest HTTP testing library to test our GraphQL server.&lt;/p&gt;

&lt;p&gt;Let’s install these two libraries as development dependencies to get started:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev jest supertest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once these libraries are done installing we can begin writing our tests.&lt;/p&gt;

&lt;p&gt;Jest tests can be grouped in a special folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;__tests__&lt;/code&gt; (double underscores on each side), so create this folder at the root of your project.&lt;/p&gt;

&lt;p&gt;Create a sample test in this folder by creating a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;sample.js&lt;/code&gt; and add the following test to it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* __tests__/sample.js */
test(&quot;A sample test&quot;, () =&amp;gt; {
  expect(2).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, install Jest globally by running this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install jest --global
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now run the &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; command at the root of your project. This should run the test and output the success messages onto the console.&lt;/p&gt;

&lt;p&gt;Now we have confirmed that Jest is running fine.&lt;/p&gt;

&lt;p&gt;We will be creating another test suite to test our queries. This will test the users query and check that it returns the appropriate status code, data type, and number of users.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;queries.js&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;__tests__&lt;/code&gt; folder and place in the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* __tests__/queries.js */
const app = require(&quot;../src/server&quot;);
const supertest = require(&quot;supertest&quot;);
const { stopDatabase } = require(&quot;../src/database&quot;);

const request = supertest(app);

afterAll(async () =&amp;gt; {
  await stopDatabase();
});

test(&quot;fetch users&quot;, async (done) =&amp;gt; {
  
  request
    .post(&quot;/graphql&quot;)
    .send({
      query: &quot;{ users{ id, name} }&quot;,
    })
    .set(&quot;Accept&quot;, &quot;application/json&quot;)
    .expect(&quot;Content-Type&quot;, /json/)
    .expect(200)
    .end(function (err, res) {
      if (err) return done(err);
      expect(res.body).toBeInstanceOf(Object);
      expect(res.body.data.users.length).toEqual(3);
      done();
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the file above, we imported our server and used it to set up a request object with Supertest. This allows Supertest to internally bind the server to a port.&lt;/p&gt;

&lt;p&gt;We then query our &lt;code class=&quot;highlighter-rouge&quot;&gt;/graphql&lt;/code&gt; endpoint with some query data by sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; request to it. Once we get a response, we use Jest to check that the appropriate status code, data type of the data (an array of users is expected), and the exact number of users we seeded in our database is returned.&lt;/p&gt;

&lt;p&gt;Now, let’s set up the test script to run our tests. Just below the start script in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, create another script named test to run the jest command as shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
“scripts”: {
	“start”: “node src/index.js”
	“test”: “jest”
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you already have a test script, defined by running &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install --save-dev jest supertest&lt;/code&gt;, edit it to what we have above.&lt;/p&gt;

&lt;p&gt;Now you can run the following command to run the test we just added:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a screen similar to the one below in your console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s automate this test process.&lt;/p&gt;

&lt;h2&gt;Automating our tests with CircleCI&lt;/h2&gt;
&lt;p&gt;To begin our test automation, we need to build a &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continuous integration&lt;/a&gt; pipeline that CircleCI will run.&lt;/p&gt;

&lt;p&gt;The pipeline will do the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Check out our repository&lt;/li&gt;
  &lt;li&gt;Install the required dependencies&lt;/li&gt;
  &lt;li&gt;Run all of our tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To do this, we need to write our pipeline script for CircleCI to pick up, build, and run our pipeline.
Create a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci&lt;/code&gt; at the root of your project and create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; inside it.
Now paste the following code inside:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2.1
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - run:
          name: update-npm
          command: &quot;sudo npm install -g npm@5&quot;
      - run:
          name: install-packages
          command: npm install
      - run:
          name: test
          command: npm run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script above imports a Docker image suitable for Node.js applications, checks out our code from the repo, installs the required packages, and runs our test script.&lt;/p&gt;

&lt;p&gt;Now commit your code and push it to your repo.&lt;/p&gt;

&lt;p&gt;Next, head over to your &lt;a href=&quot;https://circleci.com/dashboard&quot;&gt;CircleCI dashboard&lt;/a&gt; and add the project in the &lt;strong&gt;Add Project&lt;/strong&gt; section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next to your project (in this case testing-graphql), click &lt;strong&gt;Set Up Project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This should bring you to a page similar to the one below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;Start Building&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This will bring up a dialog asking if you want to create a new branch of the project and have it contain the suggested pipeline configuration displayed, or if you want to add it manually.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Add Manually&lt;/strong&gt; so that CircleCI picks up the config.yml file you just pushed to your repository.&lt;/p&gt;

&lt;p&gt;Another dialog then pops up asking you if you have added a configuration file, or you would like to download one. Click &lt;strong&gt;Start Building&lt;/strong&gt; to confirm that you’re good to go. This will trigger CircleCI to run your pipeline with the configuration file in your project.&lt;/p&gt;

&lt;p&gt;If all of your tests run successfully, you will see a screen similar to the one below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now click into the build process to see how the pipeline ran and confirm that the tests passed successfully. You will see a screen similar to the one below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-06-05-graphql-testing6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;Add another test to your &lt;code class=&quot;highlighter-rouge&quot;&gt;queries.js&lt;/code&gt; file with the code below. This test checks for an events query that does not exist on our server to see if the appropriate status code is returned:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test(&quot;query that does not exist&quot;, async () =&amp;gt; {
  const response = await request
    .post(&quot;/graphql&quot;)
    .send({
      query: &quot;{ events{ id, name} }&quot;,
    })
    .set(&quot;Accept&quot;, &quot;application/json&quot;);

  expect(response.status).toBe(400);
});

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the file, commit your code, and push to the repo once again to see your pipeline run.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;GraphQL makes life easy for both front-end and back-end developers, as it provides a very flexible API to query. Ensuring that these APIs are well-tested keeps the quality intact and brings peace of mind to the developers – knowing that any code being pushed is verified before deployment.&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/coderonfleek?lang=en&quot;&gt;Fikayo&lt;/a&gt; is a fullstack developer and author with over a decade of experience developing web and mobile solutions. He is currently the Software Lead at Tech Specialist Consulting and develops courses for Packt and Udemy. He has a strong passion for teaching and hopes to become a full-time author.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>10 great dev tools used by CircleCI's engineers</title>
        <link>https://circleci.com/blog/the-best-dev-tools-used-by-circleci-engineers/</link>
        <pubDate>Thu, 04 Jun 2020 15:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/the-best-dev-tools-used-by-circleci-engineers/</guid>
        
          <dc:creator>Vinny Thanh</dc:creator>
        
        
          <description>&lt;blockquote&gt;
  &lt;p&gt;If I have seen further it is by standing on the shoulders of giants.&lt;/p&gt;

  &lt;p&gt;— &lt;cite&gt;Isaac Newton&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software engineers are always optimizing. We tinker, try new tools, and transform our development processes. Every computer is a veritable playground of fun experiments and plugins.&lt;/p&gt;

&lt;p&gt;Out of curiosity, I spoke with a few of CircleCI’s engineers about the tools they use to boost productivity. The result was a treasure trove of software gems. It was difficult whittling this list down to only ten, but these ten tools give the most bang for the buck. I’m hoping this post can help other engineers - both within CircleCI and beyond - make their day-to-day work snappier and more fun.&lt;/p&gt;

&lt;p&gt;Special thanks to Alex Engelberg, Devin Brown, Glen Mailer, and Jacqueline Garcia for meeting with me about their setups. Additional thanks to others at CircleCI for miscellaneous tool suggestions in our (many) Slack channels.&lt;/p&gt;

&lt;h2&gt;General productivity tools&lt;/h2&gt;

&lt;h3&gt;OneTab for browsers&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.one-tab.com/&quot;&gt;OneTab&lt;/a&gt; is a handy plugin for Chrome and Firefox browsers that aggregates and stores your tabs. More specifically, it stores the links you had open in them, which allows you to close the tabs and free up RAM.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-OneTab-Open.mp4&quot; alt=&quot;Opening a OneTab group&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Opening a OneTab grouping&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Tabs are easily grouped and named: you can save an entire group of tabs as well as restore groups of tabs. I have a grouping of pages required for customer demos which I can immediately open. When I’m finished, I can just store those same tabs for the next demo.&lt;/p&gt;

&lt;p&gt;This is, in my opinion, what bookmarks should have been. Saving new bookmarks and opening them is a hassle, whereas in OneTab, they’re easy, one-click experiences. Try out OneTab and see what it can do for your browser tab management!&lt;/p&gt;

&lt;h3&gt;Momentum dashboard&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://momentumdash.com/&quot;&gt;Momentum&lt;/a&gt; is a browser extension for Chrome, Firefox, and Edge that helps users find focus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-26-Momentum.png&quot; alt=&quot;Momentum&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 100%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It replaces the new tab on the browser with beautiful background images, a motivational quote, and other items configurable by the user. There are tons of convenient widgets - countdowns, world clocks, local weather, quick notes you can take in the browser…&lt;/p&gt;

&lt;p&gt;The Links dropdown can entirely replace the Bookmarks Bar because it’s faster and far more readable. There are even keyboard shortcuts!&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-Momentum.mp4&quot; alt=&quot;Opening a link in Momentum&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Opening a link in Momentum&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;On a paid plan, you can setup integrations with apps like Todoist, Asana, Trello, Bitbucket, GitHub, and others. Combined with its “Autofocus” feature, which centers one item on the screen, you can focus on the task at hand and retain clarity for the day.&lt;/p&gt;

&lt;p&gt;Momentum has quickly become the dashboard of choice for some of us.&lt;/p&gt;

&lt;h3&gt;Clockwise for Google Calendar&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.getclockwise.com/&quot;&gt;Clockwise&lt;/a&gt; is a calendar assistant for GSuite and Chrome that intelligently manages your calendar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-26-Clockwise.png&quot; alt=&quot;Clockwise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can reschedule your meetings (called “Autopiloting”) to create the largest blocks of Focus Time, or uninterrupted blocks of time for high-quality work.&lt;/p&gt;

&lt;p&gt;In addition, there are some handy integrations, such as with Slack, to automatically turn on Do Not Disturb and sync status according to your calendar. The plugin can even color-code your meetings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-26-Clockwise-Slack.png&quot; alt=&quot;Clockwise Slack&quot; style=&quot;display: block; margin-left: auto; margin-right: auto; width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clockwise has been great for creating chunks of uninterrupted time. As engineers, it’s important for us to avoid context-switching too often and disrupting our flow. By Autopiloting certain meetings, we can effortlessly move meetings around to create those blocks.&lt;/p&gt;

&lt;h3&gt;Rectangle&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://rectangleapp.com/&quot;&gt;Rectangle&lt;/a&gt; is window manager that allows users to move and tile their windows with keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-Window-Tiling.mp4&quot; alt=&quot;Tiling windows&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Tiling windows&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;A common problem with modern tech work is the management of many apps and windows. Rectangle makes managing them easy; you can use intuitive keyboard shortcuts to move things around (for example, Ctrl+Alt+→ tiles a window right).&lt;/p&gt;

&lt;p&gt;Originally, Devin recommended &lt;a href=&quot;https://www.spectacleapp.com/&quot;&gt;Spectacle&lt;/a&gt;. However, Spectacle is no longer maintained, and its users pointed to Rectangle, an open-source alternative with essentially the same features.&lt;/p&gt;

&lt;p&gt;See how much easier it is to move your windows with Rectangle!&lt;/p&gt;

&lt;h3&gt;Clipy&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://clipy-app.com/&quot;&gt;Clipy&lt;/a&gt; is a Mac clipboard extension that preserves a longer history of items copied.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-Clipy.mp4&quot; alt=&quot;Clipy Clipboard&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Fetching a value from the Clipy clipboard&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;It supports a variety of formats including images and text, and its history is long - you can go and find that one little thing you copied several actions ago.&lt;/p&gt;

&lt;p&gt;In addition, it even supports snippets. Have something long you might type often? You can store it and have it callable with just a keyboard shortcut.&lt;/p&gt;

&lt;h2&gt;Development tools&lt;/h2&gt;

&lt;h3&gt;GitHub inline suggestions&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt; offers a powerful feature called &lt;a href=&quot;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/incorporating-feedback-in-your-pull-request&quot;&gt;suggested changes&lt;/a&gt;, which allows PR reviewers to make inline suggestions and authors to directly commit them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-26-Suggestions.png&quot; alt=&quot;Suggestions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Developers know that tired game - open PR, receive suggestions, flip back to IDE, make changes, push changes, flip back to PR… All of this is eliminated with the ability to commit a suggestion inline. This is especially useful for tiny changes.&lt;/p&gt;

&lt;p&gt;Overall, this feature has helped many of us streamline fixes to PRs for faster merges.&lt;/p&gt;

&lt;h3&gt;Dash for macOS&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://kapeli.com/dash&quot;&gt;Dash for macOS&lt;/a&gt; is an API documentation manager and code snippet manager.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-Dash.mp4&quot; alt=&quot;Dash for macOS&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Browsing and Searching Documentation on Dash&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;With 200+ offline documentation sets available, you can find documentation for the most popular languages without going online.&lt;/p&gt;

&lt;p&gt;Whether it’s browsing Go’s &lt;code class=&quot;highlighter-rouge&quot;&gt;strconv&lt;/code&gt; package or looking up PSQL commands, you can do it all using a single, fast, and unified app. It even has a snippets feature, which allows you to type an alias and expand to some larger text - highly useful for larger pieces of repeatedly typed text.&lt;/p&gt;

&lt;p&gt;Dash is extremely useful for looking up docs across many languages and projects, and offline.&lt;/p&gt;

&lt;h3&gt;Pull reminders for Slack&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://pullreminders.com/&quot;&gt;Pull Reminders&lt;/a&gt; is a Slack app that notifies users of pending tasks on PRs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-26-Pull-Reminders.png&quot; alt=&quot;Pull Reminders&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s great for notifying a user via Slack of all PR events and action items, effectively replacing GitHub’s notifications. Users can see everything they need to just in Slack, and they can turn off the email notifications to declutter their inbox.&lt;/p&gt;

&lt;h3&gt;GitLens for VS Code&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens&quot;&gt;GitLens&lt;/a&gt; is a plugin that expands Git capabilities within VS Code.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-GitLens.mp4&quot; alt=&quot;GitLens for VS Code&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Seeing line by line authors &amp;amp; commit messages inline&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Often when collaborating on projects, it can be easy to lose context about a particular piece of code. With GitLens, this information can be accessed at-a-glance: anything from inline blames, to diffs, and even history of particular files and lines of code.&lt;/p&gt;

&lt;p&gt;In addition, GitLens can show side-by-side diffs while “rewinding” through the commit history, allowing users to see line-by-line, commit-by-commit changes.&lt;/p&gt;

&lt;p&gt;Super useful.&lt;/p&gt;

&lt;h3&gt;Live Share for VS Code&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare&quot;&gt;VS Code Live Share&lt;/a&gt; is a plugin that allows users to remotely collaborate and edit in real time in VS Code.&lt;/p&gt;

&lt;p&gt;&lt;figure style=&quot;text-align: center;&quot; class=&quot;article-image-center&quot;&gt;
  &lt;video src=&quot;/blog/media/2020-05-26-Code-Live-Share.mp4&quot; alt=&quot;VS Code Live Share&quot; autoplay=&quot;&quot; loop=&quot;&quot; mute=&quot;&quot;&gt;&lt;/video&gt;
  &lt;figcaption&gt;Seeing Jacque work in a live share session&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Back in the day, remote collab was popularly done through &lt;code class=&quot;highlighter-rouge&quot;&gt;tmux&lt;/code&gt;, which ran in the Terminal and shared text-based sessions.&lt;/p&gt;

&lt;p&gt;But since then, capabilities and technologies have expanded to cover full IDE and workspace sharing, such as seen in the Live Share plugin.&lt;/p&gt;

&lt;p&gt;Many of CircleCI’s engineers use VS Code because of its great plugins and expandable features. The Live Code plugin is used often for pairing on work.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There are so many great tools out there, it’d be impossible to list them all in this post. However, the above is a small sample of the many tools CircleCI’s engineers use.&lt;/p&gt;

&lt;p&gt;They’re people who’ve done incredible work in the time I’ve known them, and we’re hoping these tools can help you do your own incredible work more effectively.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>Building strong distributed teams, one pixel at a time </title>
        <link>https://circleci.com/blog/building-strong-distributed-teams-one-pixel-at-a-time/</link>
        <pubDate>Thu, 28 May 2020 07:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/building-strong-distributed-teams-one-pixel-at-a-time/</guid>
        
          <dc:creator>Lena Reinhard</dc:creator>
        
        
          <description>&lt;p&gt;My work life is made up of millions of pixels every day. My teams are distributed across the globe, and most times, my teammates are reduced to pixels in Zoom meetings, Slack chats, and emails. We bring different backgrounds, experiences, communication styles and collaboration preferences, and many more differences to the (virtual) table.&lt;/p&gt;

&lt;p&gt;Over the last six years of my career, I’ve gotten to build and support distributed teams across the globe. While it’s been an opportunity that I’ll forever be grateful for and I got to work with fantastic people, it’s also challenged me as a leader and manager.&lt;/p&gt;

&lt;p&gt;Much less happens organically through osmosis, or at the literal watercooler, but at the same time many of the challenges all teams face, like communication and collaboration, are exacerbated when we’re distributed across locations and time zones.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The common ways of building and leading teams just can’t be applied easily. That means as leaders, we often need to get much more creative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the same time, having to be much more intentional as a manager has helped me learn so much, and I’m thankful for how my teams have helped me improve. The main lesson I’ve learned is that despite not being co-located we can still create stronger, more deliberate distributed teams and produce the same, or even better results, than teams that share the same lunch table.&lt;/p&gt;

&lt;p&gt;In this post, I’ll share what I’ve learned about improving teams based on three key “C” pillars: connection, communication, and collaboration. Whether you’re managing teams across the world or in the same building, these approaches can help you become more strategic, communicate better, and build highly aligned, well-connected teams that deliver great products.&lt;/p&gt;

&lt;h2&gt;Five factors that create high-performing distributed teams&lt;/h2&gt;

&lt;p&gt;How do you turn complicated, far-flung systems like our widely-distributed system of humans into teams? The research shows that there are five key factors that make teams high-performing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Psychological safety.&lt;/strong&gt; This means that we feel free to express our work-relevant thoughts and feelings to others, and we believe that they won’t think less of us if we make a well-intentioned mistake or ask for help.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependability.&lt;/strong&gt; That means our teams are completing quality work, and doing it on time.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Structure &amp;amp; clarity.&lt;/strong&gt; Everyone needs to understand their role, expectations, and plans.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Meaning.&lt;/strong&gt; Being able to work on tasks that are meaningful to us.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Impact.&lt;/strong&gt; We find a sense of purpose in our work or the output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the research about high-performing teams doesn’t say that everyone has to be in the same office, sharing the same fridge (based on everything I know about office fridges, that could actually be a good thing). But many of the practices that high-performing teams use are much easier to do when everyone is in the same room.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Team members need to feel free to express work-relevant thoughts and feelings to others, and believe people won’t think less of them if they make well-intentioned mistakes or ask for help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If building teams is hard overall, then building distributed teams is even harder. Much less happens organically through osmosis, or at the literal watercooler. And many of the challenges that all teams face are exacerbated when we’re distributed across locations and time zones. The common ways of building and leading teams just can’t be applied easily. That means as leaders, we often need to get much more creative.&lt;/p&gt;

&lt;h2&gt;Three Cs for leading high-performance teams&lt;/h2&gt;

&lt;p&gt;Creating a high-performing distributed team is fundamentally about inclusion: making sure that everyone has equal opportunities to contribute by leveling the playing field and removing barriers to doing so.  At the same time, I believe it’s impossible to replicate the exact same working experience for everyone – and I don’t think that should be the goal. Instead, we should make sure everyone is able to contribute in meaningful ways and do their best work.&lt;/p&gt;

&lt;p&gt;So what does it mean to be a leader in a distributed team? We create structures to help people work together in such a way that everyone can do their best work. We provide building blocks for others to lean on and rely on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;As engineering leaders, we’re like the mortar between the bricks: We connect structures, teams, and people.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We hold them together. Our work as leaders isn’t supposed to be about us. It’s about the people and the teams that we support. We build the structures to help others shine.&lt;/p&gt;

&lt;p&gt;In my work so far, I’ve been using different approaches to achieve this, focusing on building structures and supporting connection, communication, and collaboration in my teams. Let’s take a look at how you can utilise those to help your teams improve.&lt;/p&gt;

&lt;h3&gt;Connection: Working together with purpose&lt;/h3&gt;

&lt;p&gt;As humans, we strive to be connected with a larger purpose. But we also seek to feel connected with other people around us. When we’re in the same location as our teammates, we pick up small signals about them. We see their body language when they walk into the office in the morning. We know if people are tense or if they’re relaxed, or may recognize when they’re having more coffee than usual.&lt;/p&gt;

&lt;p&gt;Use small actions to open doors to connections. The small signals get lost remotely, which means other things become much more important, like understanding people’s varying energy levels. When my colleagues in San Francisco start their work day, they’re high-energy and excited. But it’s 5pm or 6 pm for me in Berlin, and it might already be dark out if it’s winter. I’m tired and can’t pull my thoughts together on some days, but still want to be present and focused for my team. In cases like this, it helps if all of us in a conversation are sensitive to the other person’s state of mind, and where we are in our workday.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make space for humanness.&lt;/strong&gt; When I joined CircleCI in 2018, I met with everyone in our engineering organization because I wanted to get to know the people we were working with. During one of those conversations, one of our engineers said to me, “I need to meet my team in person every once in a while to remind myself that they’re actual people.” The sentiment struck a chord with me.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When we mostly interact with people in the shape of pixels in video calls or icons in chat apps, it’s easy to forget that there are humans at the other end of the screens.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we center in on each other’s humanness, we go beyond teammates’ domain expertise. We need to be curious about who they are as people, and know what drives and motivates them.&lt;/p&gt;

&lt;h3&gt;Communication: Creating clearly defined expectations&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Define expectations, and surface what matters.&lt;/strong&gt; As leaders, it’s our responsibility to make sure that our expectations are always clear to everyone on our team. That’s one of the many reasons why weekly one-on-one meetings are the backbone of our communication, as well as with our relationships with our teammates.&lt;/p&gt;

&lt;p&gt;This is especially true when your organization is in high-growth mode. When I joined CircleCI in 2018, the engineering team had been growing by 50 percent year over year, and also increasing in terms of geographical distribution. Conversely, the management team was incredibly small. And after all this growth, we were running into challenges around evolving our engineering culture. We had a bunch of knowledge silos on teams. But at the same time, we had folks who were really keen on growing. What we needed was a way to build a pathway for all of this enthusiasm that would allow us to scale the business.&lt;/p&gt;

&lt;p&gt;One of the things we did at CircleCI was create an engineering competency matrix, and communicate it to our teams. It’s our career-growth framework for engineers. This matrix is now woven into everything we do, from hiring, to structured feedback, to performance reviews. It helps us hold everyone to the same standards, and clarify expectations as we scale.&lt;/p&gt;

&lt;p&gt;Once we’ve set expectations for growth and performance, the next thing we need to do is communicate these standards and hold each other to them. Praise is a really beautiful way to both connect and communicate as a team. In our company Slack, we have a channel called #gratitude in which people share their appreciation for others who have helped them. It allows us to see how small acts of kindness help us connect as a company.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Grow together.&lt;/strong&gt; An even better way to connect and communicate as a team is by helping each other grow through constructive criticism. In distributed teams, this can be really difficult to do well. When we mostly see each other on screens, it becomes difficult to have harder conversations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/Feeedback-template.png&quot; alt=&quot;Feeedback-template.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I have a template I co-opted from the book &lt;a href=&quot;https://www.goodreads.com/book/show/42058450-feedback-and-other-dirty-words&quot;&gt;Feedback and Other Dirty Words&lt;/a&gt; by M. Tamra Chandler that I often use as a starting point. I’ll ask my team to discuss our feedback preferences in this format, then discuss the responses as a group. We use what we learned to give each other much more meaningful and specific feedback.&lt;/p&gt;

&lt;p&gt;When we make space for each other’s humanness, we clarify expectations and we help each other grow. We build trust with our teammates, which provides the basis for our collaboration as a team.&lt;/p&gt;

&lt;h3&gt;Collaboration: Making space for others&lt;/h3&gt;

&lt;p&gt;We shape collaboration in large part with our own mindset. For example, we need to think often about power dynamics in teams and organizations. Many of us hold explicit or implicit power on our teams – through formal or informal leadership roles, domain expertise, seniority, or tenure. But all of us also carry biases and blind spots. We can set ourselves up for much better collaboration when we approach these biases with humbleness and an awareness of power dynamics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay humble, and make space for others.&lt;/strong&gt; Just as we try to connect in many small ways, there are small ways we can become better collaborators throughout the work day. For example, we can avoid dominating conversations, even when they are written communications. Think about the times when you’re sending teammates walls of text, or when you bury documents in comments. When we’re in meetings, or when we have discussions in chat, we need to ask ourselves, “How much space am I taking up right now?” It’s our responsibility to open up space for others and invite them into conversations by asking, “What’s your opinion on this? I’d like to hear your thoughts.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build foundational relationships.&lt;/strong&gt; Collaboration is one of the best vehicles that distributed teams have for relationship-building. As leaders, relationships are foundational for us to be able to do our jobs well. But relationships are equally important for everyone on our team, because collaboration is not just about the output of work. Our engineering teams often use the pair programming technique, which helps them strengthen relationships with their teammates and makes teams more resilient. Pair programming also helps us avoid knowledge silos and distribute information – and it’s a really great tool for onboarding new teammates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combat hero culture and fix structural issues.&lt;/strong&gt; “Hero culture” describes a culture where organizations reward very talented people who consistently go the extra mile to get seemingly impossible tasks done by themselves and under lots of pressure. Many companies reward this kind of heroism through promotions, or increasing influence, compensation, or visibility. Hero culture is still incredibly common in our industry, and I’ve seen it have disastrous effects on teams and organizations.&lt;/p&gt;

&lt;p&gt;Hero culture is even more pervasive on distributed teams because of the disproportionately high visibility of this type of work compared to other work: “hero tasks” such as single-handedly fixing an issue at times that one normally wouldn’t work often come with high visibility, whereas the hard work around sustaining a team and supporting teammates in the background often goes more unnoticed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hero culture not only weakens teams, it also sets up the heroes for failure by putting pressure on them as the only people who can solve problems.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hero culture is the result of organizational failure and very hard to combat, but it’s our responsibility as leaders to identify and fix it, and make things better for the people affected by it. As leaders, we have a responsibility to combat hero culture by making sure we build the support structures that help avoid or at least reduce the necessity for such acts of heroism. We also need to be mindful of the behaviours that we encourage, reward, and ask people for, even if implicitly or unintentionally.&lt;/p&gt;

&lt;h2&gt;Building our team continuously&lt;/h2&gt;

&lt;p&gt;There’s one more “C” pillar that’s important to note here: continuity. Building great teams is a lot of work – and the process is never done. We all constantly grow and change, and the organizations we work in are ever-evolving and full of surprises. This is one of the main reasons why I love working with people so much.&lt;/p&gt;

&lt;p&gt;Building teams is a continuous process every single day. No matter where you are in your team’s development – and no matter if your closest teammate sits across the table or across an ocean from you – focus on strong connections, intentional collaborations, and conscious communication with your teammates. Continue building your team every single day, one pixel at a time.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>You are what you Git: how your VCS branching model affects your delivery cadence</title>
        <link>https://circleci.com/blog/you-are-what-you-git-how-your-vcs-branching-model-affects-your-delivery-cadence/</link>
        <pubDate>Tue, 26 May 2020 15:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/you-are-what-you-git-how-your-vcs-branching-model-affects-your-delivery-cadence/</guid>
        
          <dc:creator>Camilo Polymeris</dc:creator>
        
        
          <description>&lt;p&gt;The path of a software engineer is one of constant learning. We learn things from concepts and processes to languages and tools. Once we have seen them work, we add them to our arsenal and make them our praxis.&lt;/p&gt;

&lt;p&gt;Before joining CircleCI, my years of experience led me to believe that I was an engineer with a firm understanding of the technical aspects of the craft, as well as what is considered good practice. CircleCI showed me that I had still more to learn.&lt;/p&gt;

&lt;p&gt;At CircleCI, my team uses a short-lived branching model for software development. While this strategy goes against everything I once thought was the ‘right’ way to develop software, in this post, I’ll describe how seeing it in practice has taught me to embrace it.&lt;/p&gt;

&lt;h2&gt;Our model&lt;/h2&gt;
&lt;p&gt;The most popular branching model is &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;GitFlow&lt;/a&gt;. For the purposes of this post, I’ll simplify it as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use one branch for development work.&lt;/li&gt;
  &lt;li&gt;Use one or more branches or tags for different levels of production-readiness, hotfixes, etc.&lt;/li&gt;
  &lt;li&gt;&lt;i&gt;Gradually&lt;/i&gt; move code from feature branches to development, and then to production as a feature becomes tested and ready.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/blog/media/2020-05-22-git-model.png&quot; width=&quot;600&quot; /&gt;
&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Author: Vincent Driessen
  &lt;br /&gt;Original blog post 
    &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot; style=&quot;color:#0000EE;&quot;&gt;here&lt;/a&gt;.
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This is the branching model I was familiar with. The one I had experienced in every project, at every company, and it had served me well. With perhaps minor variations, that’s what I thought everyone did.&lt;/p&gt;

&lt;p&gt;What a surprise, then, to arrive at CircleCI and find that there is no staging environment, no hotfixes branch, and what is on master goes directly to production. Yes, while we work on a ticket, we create a branch. But this branch often lasts less than a day. It might only partially implement a feature (protected by feature flags or just not user-accessible), get reviewed, and get merged. Then it goes to production. Again, no staging environment! No QA team to check that things are working! No release window timed to your sprint (because, spoiler, there are no sprints)!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/blog/media/2020-05-22-gitflow2.png&quot; width=&quot;600&quot; /&gt;
&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt;
  The branching model at CircleCI: one master branch, many very short-lived, &quot;sub-feature&quot; branches.
&lt;/div&gt;

&lt;h2&gt;Why this model?&lt;/h2&gt;
&lt;p&gt;Why we do this has a lot to do with CircleCI’s mission to empower teams to deliver value quickly. The VCS branching model you use has a big impact on your delivery cadence. Our model synergizes extremely well with CI/CD best-practices. The characteristics of our flow, like short lived branches, and fast deployment cycles, &lt;a href=&quot;https://circleci.com/resources/data-driven-ci/&quot;&gt;have been shown to correlate with high performance teams&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;How you can do it&lt;/h2&gt;
&lt;p&gt;If you are accustomed to a more traditional flow like I was, this probably sounds scary. I like to think I write good code, but software has bugs; that’s inevitable. CircleCI is a mission-critical part of hundreds of thousands of developer’s path to production. That carries a lot of responsibility. What if I push a bug to production and there is no QA team to catch it? What if I break a feature? What if I bring the whole thing down?&lt;/p&gt;

&lt;p&gt;I worried that my colleagues didn’t seem concerned. Were they so much more experienced than me that they trust their code to be flawless? Are they just naive?&lt;/p&gt;

&lt;p&gt;There is an incredible amount of talent at CircleCI. However, the confidence in the software is not the result of hiring mythical 10x engineers. It is the result of working every day to make our &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continuous integration&lt;/a&gt; pipeline  better and more reliable. Here are the ways that we accomplish this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Testing, &lt;a href=&quot;https://circleci.com/blog/testing-methods-all-developers-should-know/&quot;&gt;in its many forms&lt;/a&gt;, is expanded from unit testing and security testing, to load and stress testing.&lt;/li&gt;
  &lt;li&gt;Any developer can deploy partially using canaries. This contains the blast radius of faulty code to a very small fraction of traffic.&lt;/li&gt;
  &lt;li&gt;We implement mean time to recovery reducing measures, including monitors and meaningful alarms, diagnostic tooling, and the means to quickly roll back (or forward).&lt;/li&gt;
  &lt;li&gt;Blameless incident post-mortems are conducted to establish failure modes and minimize future reincidence, providing feedback for this strategy.&lt;/li&gt;
  &lt;li&gt;We keep a constant eye on the balance between mean times between failure and time to recovery, between reliability and agility.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is always room for improvement, but &lt;a href=&quot;https://circleci.com/resources/testing-in-production/&quot;&gt;this strategy&lt;/a&gt; provides incredible value. We would not be able to deliver value as quickly using a “safer” flow like GitFlow or if we had a dedicated QA team.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s been over two years since I joined CircleCI. And while I concede there is no VCS branching model that fits all teams, I am happy to have learned that the option CircleCI chose exists, and to have experienced how it affects our delivery cadence, and the engineering culture we build around our product.&lt;/p&gt;

&lt;p&gt;When every developer is responsible for what is in production and treats every commit as a release candidate, it fosters a culture of investing in sustainable software quality, for their own benefit as well as their teammates’. We build this together.&lt;/p&gt;

</description>
        
      </item>
    
      
      <item>
        <title>15 testing methods all developers should know</title>
        <link>https://circleci.com/blog/testing-methods-all-developers-should-know/</link>
        <pubDate>Fri, 22 May 2020 11:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/testing-methods-all-developers-should-know/</guid>
        
          <dc:creator>Vinny Thanh</dc:creator>
        
        
          <description>&lt;p&gt;Within software, there are many technical concepts and definitions. It can be mind-boggling when learning new topics or even when switching between companies that use different terms.&lt;/p&gt;

&lt;p&gt;Testing is one such topic . As modern technology companies mature along their DevOps journey by adopting &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continuous integration&lt;/a&gt; practices, an increasing level of importance is being placed upon testing and testing automation. Don’t get lost in the confusion of all of the different methods. Here is a high-level reference to the most common types of software testing.&lt;/p&gt;

&lt;h2&gt;1. Unit testing&lt;/h2&gt;
&lt;p&gt;Unit testing is a testing method focused around vetting individual “units”, or pieces of code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The primary goal of unit testing is to determine logical integrity — that a piece of code does what it’s supposed to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally, people will test individual methods or functions as units, and depending on the size and complexity of code, also classes. They’re tested in isolation, and subsequently any typical dependencies are &lt;a href=&quot;https://circleci.com/blog/how-to-test-software-part-i-mocking-stubbing-and-contract-testing/&quot;&gt;stubbed or mocked&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this would be if you had a function that massages data from a database. However, since it’s a unit test, you wouldn’t use a real database: you’d make a call to a stubbed endpoint, which returns the data you’d normally expect from a database. That way, the only functionality being tested is this piece of code, or the unit.&lt;/p&gt;

&lt;p&gt;Most languages have at least one unit testing framework recommended for itself (e.g. Java → &lt;a href=&quot;https://junit.org/junit5/&quot;&gt;JUnit&lt;/a&gt;, Python → &lt;a href=&quot;https://wiki.python.org/moin/PyUnit&quot;&gt;PyUnit&lt;/a&gt; or &lt;a href=&quot;https://docs.pytest.org/en/latest/&quot;&gt;PyTest&lt;/a&gt;, JavaScript → &lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt;, &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt;, &lt;a href=&quot;https://karma-runner.github.io/latest/index.html&quot;&gt;Karma&lt;/a&gt;, etc.).&lt;/p&gt;

&lt;h2&gt;2. Integration testing&lt;/h2&gt;
&lt;p&gt;Integration testing is a testing method focused on vetting multiple components together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The primary goal of integration testing is to ensure relationship integrity and flow of data between components or units.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Usually, people will run unit tests first to test logical integrity of individual units. Then they will run integration tests to ensure interaction between these units is behaving as expected. Continuing the above example, an integration test in this case would be running the same test against a real database. With real databases, you have additional scenarios and behaviors to consider.&lt;/p&gt;

&lt;p&gt;“Integration testing” is a broad term and encompasses any tests where multiple components are involved. Subsequently, a large variety of technologies and frameworks can be used, including the same ones used above in unit testing, or separate, behavioral-based frameworks (examples listed in next section).&lt;/p&gt;

&lt;h2&gt;3. End-to-End testing (E2E, System)&lt;/h2&gt;
&lt;p&gt;System tests, or end-to-end (E2E) tests, are focused on vetting the behavior of a system from end-to-end.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The primary goal of end-to-end testing is to ensure the entire application or system as a unit behaves how we expect it to, regardless of internal workings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In essence, unit and integration tests are typically “white box” (e.g. internals are known) whereas E2E tests are typically “black box” (e.g. we only verify input and output combinations).
An example E2E test might be a generic user story like “Fetch a user’s data.” The input could be a simple GET request to a specific path, and then we verify that the output returned is what we expect. How the system fetched that data underneath is irrelevant.&lt;/p&gt;

&lt;p&gt;As you can see, E2E tests can only check the overall behavior, so this is why unit and integration tests are necessary. It could be that although the output is correct, the way the result is obtained internally is incorrect, and an E2E test would not catch that.&lt;/p&gt;

&lt;p&gt;For E2E tests, you typically use behavioral-based frameworks. You might use frameworks like &lt;a href=&quot;https://cucumber.io/&quot;&gt;Cucumber&lt;/a&gt;, &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt;, &lt;a href=&quot;https://www.soapui.org/&quot;&gt;SoapUI&lt;/a&gt;, &lt;a href=&quot;https://intuit.github.io/karate/&quot;&gt;Karate&lt;/a&gt;, &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;, &lt;a href=&quot;https://www.katalon.com/&quot;&gt;Katalon&lt;/a&gt;, etc. Note that a lot of API-testing frameworks are used for E2E testing because an API is typically how you programmatically interact with an app.&lt;/p&gt;

&lt;h2&gt;4. Acceptance testing&lt;/h2&gt;
&lt;p&gt;Acceptance testing is typically a phase of the development cycle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The primary goal of acceptance testing is to verify that a given product or feature has been developed according to specifications set forth by a customer or an internal stakeholder, like a product manager.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Within acceptance testing, there can also be multiple phases, such as α-testing or β-testing. As much of the software development world moves toward Agile processes, user acceptance testing has become much less rigid and more collaborative.&lt;/p&gt;

&lt;p&gt;It’s important to note that while acceptance tests can verify that the application behaves how a user wants it to, it does not verify the integrity of the system. Another caveat of user acceptance testing is there’s a limit to the corner cases and scenarios a person can come up with - this is why the previous automated testing methods are important since every single use case and scenario is codified.&lt;/p&gt;

&lt;h2&gt;5. White box testing (structural, clear box)&lt;/h2&gt;
&lt;p&gt;White box (also called structural or clear box) testing describes tests or methods in which &lt;strong&gt;the details and inner workings of the software being tested are known.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since you know the functions, the methods, the classes, how they all work, and how they tie together, you’re generally better equipped to vet the logical integrity of the code.&lt;/p&gt;

&lt;p&gt;For example, you might know there’s a quirk with the way a certain language handles certain operations. You could write specific tests for that, which you otherwise would not know to write in a black-box scenario.&lt;/p&gt;

&lt;p&gt;Unit testing and integration testing are often white box.&lt;/p&gt;

&lt;h2&gt;6. Black box testing (functional, behavioral, closed box)&lt;/h2&gt;
&lt;p&gt;In contrast, black box (also called functional, behavioral, or closed box) testing describes any tests or methods in which &lt;strong&gt;the details and inner workings of the software being tested are not known.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since you don’t know any of the particulars, you can’t really create test cases that target specific niche scenarios or stress specific logic in the system.&lt;/p&gt;

&lt;p&gt;The only thing you do know is that for a request or given piece of input, a certain behavior or output is expected. Hence, black box testing primarily tests the behavior of a system.
End-to-end tests are often black box.&lt;/p&gt;

&lt;h2&gt;7. Gray box testing&lt;/h2&gt;
&lt;p&gt;Gray box testing is just a hybrid combination of black box and white box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gray box testing takes the ease and simplicity of black box testing (e.g. input → output) and targets specific code-related systems of white box testing.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason gray box testing exists is because black box testing and white box testing by themselves can miss important functionality.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Black box testing only tests that you get a certain output for a given input. It does not test the integrity of internal components — you could be getting the correct output purely by chance.&lt;/li&gt;
  &lt;li&gt;White box testing focuses on the integrity of individual units and how they function together, but it is sometimes insufficient for finding system-wide or multi-component defects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By combining the two types together, gray box testing can encompass more complicated scenarios to really validate that an application is sound in structure and logic.&lt;/p&gt;

&lt;h2&gt;8. Manual testing&lt;/h2&gt;
&lt;p&gt;Self-explanatory — &lt;strong&gt;manual testing is testing in which a user manually specifies input or interacts with a system.&lt;/strong&gt; They may also manually assess results.&lt;/p&gt;

&lt;p&gt;This method of testing can generally be slow and error-prone. Much of the software industry has moved towards automated testing alongside adoption of Agile principles.&lt;/p&gt;

&lt;p&gt;Nowadays, users might manually test a product in beta to check for acceptance, edge cases,  and niche scenarios.&lt;/p&gt;

&lt;h2&gt;9. Static testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Static testing describes any methods or methods of testing in which no actual code is being executed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This actually includes reviewing code together with others, manually verifying the logic and integrity of functions, classes, etc.&lt;/p&gt;

&lt;p&gt;Just like manual testing, static testing can be slow and error-prone, and generally static testing is done as a first line of defense to catch very obvious problems.&lt;/p&gt;

&lt;p&gt;Many companies engage in code reviews before an engineer’s work is merged into the main branch. These code reviews are to save time and catch the low-hanging fruit.&lt;/p&gt;

&lt;h2&gt;10. Dynamic testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Dynamic testing describes any methods or methods of testing in which code is actually being executed.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Generally, all of the previous mentioned testing methods are dynamic except manual and sometimes acceptance. You’re usually running automated scripts or using frameworks to execute inputs to your system.&lt;/p&gt;

&lt;h2&gt;11. UI/Visual testing (browser testing)&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;UI or browser testing describes tests which specifically vet the integrity and behavior of user interface components.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Often when using a website, certain actions are expected to result in certain states. UI tests verify that these happen correctly. For example, the way you’ve implemented certain CSS might break in Firefox, but not Chrome. Browser tests can check that.&lt;/p&gt;

&lt;p&gt;There are a lot of popular browser testing frameworks such as &lt;a href=&quot;https://www.selenium.dev/&quot;&gt;Selenium&lt;/a&gt;, &lt;a href=&quot;https://www.cypress.io/&quot;&gt;Cypress&lt;/a&gt;, &lt;a href=&quot;https://devexpress.github.io/testcafe/&quot;&gt;TestCafe&lt;/a&gt;, &lt;a href=&quot;https://saucelabs.com/&quot;&gt;SauceLabs&lt;/a&gt;, &lt;a href=&quot;https://www.katalon.com/&quot;&gt;Katalon Studio&lt;/a&gt;, &lt;a href=&quot;https://www.browsersync.io/&quot;&gt;Browsersync&lt;/a&gt;, &lt;a href=&quot;https://robotframework.org/&quot;&gt;Robot&lt;/a&gt;, etc.&lt;/p&gt;

&lt;h2&gt;12. Smoke testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Smoke testing just refers to a smaller subset of checks to reasonably verify a system is working.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s just choosing and running a non-exhaustive set of tests that vet core functionality.&lt;/p&gt;

&lt;p&gt;An example of this might be testing just a couple user flows, such as “Fetch a user’s data” from above. It’s not exhaustive, but since most of your application includes a user logging in, making a request, and fetching data from somewhere, this one test or few tests can give you reasonable confidence that your system is functional and working.&lt;/p&gt;

&lt;p&gt;Usually smoke tests are run when users expect changes to not have made any significant impacts to overall logic and function. It can be expensive and time-consuming to run the full suite of all tests every single time, so smoke tests are used as an inexpensive safety measure that can be run more often.&lt;/p&gt;

&lt;h2&gt;13. Regression testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Regression testing is a testing method to verify if any previously-functional features have suddenly broken (or regressed).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This often includes running the entirety of all unit, integration, and system tests to ensure no functionality has changed unexpectedly. As we all know, sometimes software has the oddest way of breaking.&lt;/p&gt;

&lt;p&gt;Regression tests are often time-consuming and can be very expensive, which is why sometimes people will run smoke tests instead, especially if recent changes are not logically expected to impact the whole system.&lt;/p&gt;

&lt;p&gt;Often when people set up CI/CD, they will run smoke tests on almost every commit, whereas regression suites might run at set intervals or on large features to ensure continuous integration without issues.&lt;/p&gt;

&lt;h2&gt;14. Load testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Load testing refers to testing an application’s response to increasing demand.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This includes testing sudden influxes of requests or users that might put unexpected strain on the system. Load testing is often done as a part of security tests to ensure an application and its system cannot be &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot;&gt;DDOS&lt;/a&gt;’d.&lt;/p&gt;

&lt;p&gt;Load testing is also done to verify the maximum amount of data a system can handle at any given time. It’s integral for helping teams determine effective HA (high availability) implementation and scaling formulas.&lt;/p&gt;

&lt;h2&gt;15. Penetration testing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Penetration testing (or pen testing) is a form of security testing that involves verifying the robustness of an application’s security.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Every manner in which an application can be compromised (cross-site scripting, unsanitized inputs, buffer overflow attacks, etc.) is exploited to check how the system handles it. Pen tests are an important part of making sure a company does not fall victim to serious breaches.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, there are a lot of different terms used in software testing, and many of these often overlap or are used interchangeably (however incorrectly).&lt;/p&gt;

&lt;p&gt;By understanding exactly what each of these terms mean and knowing what they encompass, you’ll be able to understand what people are talking about and dig in deeper as per your needs. You might even be able to correct them now.&lt;/p&gt;

&lt;p&gt;If you’re interested in automating your tests, sign up for a free account today and see how CircleCI can help you catch problems sooner.&lt;/p&gt;

&lt;p&gt;Happy engineering.&lt;/p&gt;

</description>
        
      </item>
    
      
      <item>
        <title>Prerequisites for evolutionary architectures</title>
        <link>https://circleci.com/blog/prerequisites-for-evolutionary-architectures/</link>
        <pubDate>Thu, 21 May 2020 09:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/prerequisites-for-evolutionary-architectures/</guid>
        
          <dc:creator>Chris Howe-Jones</dc:creator>
        
        
          <description>&lt;p&gt;Designing software that is flexible and changeable is arguably the most important architectural property.&lt;/p&gt;

&lt;p&gt;I often get other software architects saying “What about performance?” or “What about security?”&lt;/p&gt;

&lt;p&gt;I’m not saying these other properties are not important to consider early on. They are. However, if we optimise our architecture for change (evolvability), when we discover a performance issue or a security vulnerability we can change our system to help address it. The ability to respond quickly to issues like these is exactly what makes evolutionary architecture so essential.&lt;/p&gt;

&lt;h2&gt;What properties are important in evolution?&lt;/h2&gt;
&lt;p&gt;You can think of the way a species adapts to its environment in the same way that you think of evolutionary architecture. To be successful, animals need to produce new generations with advantageous traits, respond to feedback from the environment, and leave room for failure by falling back on what works.&lt;/p&gt;

&lt;p&gt;Software is similar. You need to make sure it’s adaptable and that you’re making changes to your system based on what works. There are a few key ways that we can create these adaptable architectures:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pick constraints to support rapid change&lt;/li&gt;
  &lt;li&gt;Separate the concepts of deployment from release&lt;/li&gt;
  &lt;li&gt;Gather and share fast (appropriate) feedback
    &lt;ul&gt;
      &lt;li&gt;In development&lt;/li&gt;
      &lt;li&gt;In production&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build a responsive culture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Pick your constraints to support changeability&lt;/h2&gt;
&lt;p&gt;In order to support evolution in software we need to be aware of the constraints of the software and the environment that the software operates in.&lt;/p&gt;

&lt;p&gt;As software architects and developers we have control over some aspects of the environment we build and run software in. Here are some of the constraints we might want to consider to support change/evolution.&lt;/p&gt;

&lt;h3&gt;Pick the right building materials&lt;/h3&gt;
&lt;p&gt;At the start of my career, I believed that any Turing complete programming language was equivalent to any other and the language picked was not that important. As I’ve become exposed to more programming languages, paradigms, libraries, and frameworks I’ve realised that the ‘building materials’ we pick have a huge impact on the inherent properties of our software systems, especially on changeability.&lt;/p&gt;

&lt;p&gt;When you start building a new system, consider the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Favour languages, libraries, and approaches that allow you to parse the data you need from larger more complex structures.&lt;/li&gt;
  &lt;li&gt;If you are using a strongly statically typed language consider using a language that infers type to reduce changes you need to make through your code base.&lt;/li&gt;
  &lt;li&gt;If you use a weakly typed language, think about what libraries or idioms you may need to add constraints on the types of changes allowed and how they can occur (otherwise you are in the wild west and anything goes)&lt;/li&gt;
  &lt;li&gt;Favour immutable data structures - immutability constrains the way state can change in your executing program thus simplifying reasoning about state, especially in a multi threaded environment. If your language doesn’t support immutable data structures as the default there are plenty of libraries out there for most languages (look for persistent immutable data structures that reuse memory).&lt;/li&gt;
  &lt;li&gt;Favour declarative approaches over imperative ones.&lt;/li&gt;
  &lt;li&gt;Do  you understand the problem well enough to pick a framework early on or should you maintain the flexibility by constructing your solution using small libraries? Pick tools and approaches to support feedback and deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to evolve, our software needs to be easy and quick to release, and we need feedback about it’s appropriateness during development and while in production. Therefore we should pick tooling and approaches that support those properties.&lt;/p&gt;

&lt;p&gt;Here’s a non-exhaustive list of some things to consider:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Continuous integration&lt;/li&gt;
  &lt;li&gt;Continuous delivery&lt;/li&gt;
  &lt;li&gt;Dark deployments&lt;/li&gt;
  &lt;li&gt;Canary deployments&lt;/li&gt;
  &lt;li&gt;Blue/green deployments&lt;/li&gt;
  &lt;li&gt;Automated testing&lt;/li&gt;
  &lt;li&gt;Automated alerting/monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though it may sound frightening, it can be useful to incorporate production-testing alongside other testing methodologies. Sometimes testing less and allowing something to alert if it fails can be a risk worth taking or even be advantageous in detecting the actual problem in production. Production is the only real test environment. However, this is a risk judgement dependent on the problem, architecture etc.&lt;/p&gt;

&lt;p&gt;Implementing some or all of these approaches can enable you to respond to a bug by fixing forward fast rather than taking a more defensive approach of testing excessively and reverting if a bug occurs.&lt;/p&gt;

&lt;h3&gt;Stay small as long as possible&lt;/h3&gt;
&lt;p&gt;For every additional person involved in writing a system, you exponentially increase the communication paths on your team. If you can keep your teams and the number of teams as small as practical you reduce the amount of communication and coordination required to implement each change.&lt;/p&gt;

&lt;p&gt;I would extend this principle to keeping the number of teams as small as possible too.&lt;/p&gt;

&lt;p&gt;Working with a constraint of a limited number of (the right) people will result in innovative approaches to solutions. Just make sure that one of them is not to work longer hours (therefore consider an upper limit on working hours as another constraint!).&lt;/p&gt;

&lt;h3&gt;Organisation-wide systems thinking&lt;/h3&gt;
&lt;p&gt;Even the most ‘brick and mortar’ businesses do a lot if not the majority of their customer interactions via software (even if it’s B2B) and therefore your organisation should think of software as the primary means of revenue generation.&lt;/p&gt;

&lt;p&gt;Forcing ‘project thinking’ onto software development is a bad idea. Trying to implement a number of ‘features’ to a deadline and budget is often necessary but if every change to your software happens this way then that short term focus never leads to longer term consideration of the product or platform and it’s quality properties.&lt;/p&gt;

&lt;p&gt;You can use projects to manage budgets but always think about the product or platform when choosing what to implement.&lt;/p&gt;

&lt;h2&gt;Separate deployment from release&lt;/h2&gt;
&lt;p&gt;In order to evolve, our software has to generate a new ‘mutated’ generation. If you can deploy your changes in a canary deployment or even, depending on the change, a dark deployment you can test the change in the only realistic test environment, production.&lt;/p&gt;

&lt;p&gt;Without mandating a specific architecture (e.g. microservices, event streaming, modular monolith) Domain Driven Development (DDD) and Event Storming are very useful in determining the boundaries of deployment units.&lt;/p&gt;

&lt;p&gt;Don’t consider static modelling in isolation If you build a data, component or class model in isolation you often focus on the wrong attributes. For example, you can model hundreds of attributes about a student in a university but the bursary system probably only cares about identification, fees and payment information plus events that change the state of those attributes whereas student services care about much more personal information. Use the dynamic aspects of the system to guide what information is important to that context.&lt;/p&gt;

&lt;p&gt;Thinking about events and flows often leads to discovering the components (deployment units) of the system. Each high level process that sends and/or receives a message is a potential component.&lt;/p&gt;

&lt;p&gt;Here is a list of techniques that can be useful for separating deployment from release:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Feature toggling&lt;/li&gt;
  &lt;li&gt;Branch by abstractions&lt;/li&gt;
  &lt;li&gt;Continuous Integration/Continuous Delivery&lt;/li&gt;
  &lt;li&gt;Immutable servers – packaging aspects of the runtime environment in an immutable image makes deployment and rollback a much less risky proposition.&lt;/li&gt;
  &lt;li&gt;Schema on Read DB’s – they make adding data in a deployment much easier provided you always ‘accrete’ (or add to) your schema.&lt;/li&gt;
  &lt;li&gt;Adopt API ‘accretion’ – Always adding to your APIs and only logically deprecating functionality or data is easier for client applications to deal with and a ‘breaking’ change is really a new API so treat it that way.  Think about how to deal with data returned if you don’t have full control over your clients and can’t trust they parse only the data they need (e.g. do all clients implement tolerant reader pattern?). This is where using GraphQL even in service to service calls can have benefits as it’s inherent constraints assume only returning what’s requested (and you get schema introspection).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Fast appropriate feedback&lt;/h2&gt;
&lt;p&gt;I like to think about software as ‘living’ inside increasing larger ecosystems in the same way that biological organisms do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-20-image1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Illustration 1: Ecosystems feedback &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Illustration 1 shows the layers of ecosystems that our software ‘lives’ in. We can see from this illustration that the inner ecosystem can be affected by a change in one of the outer ecosystems but, conversely, the inner ecosystem can cause a change in the outer ecosystems.&lt;/p&gt;

&lt;p&gt;Additionally not shown in this diagram is the concept of the frequency of the feedback.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Software environment feedback is measured/sampled in microsecond/seconds/minutes/hours.&lt;/li&gt;
  &lt;li&gt;Team/product environment feedback is likely to be measured/sampled in days or weeks.&lt;/li&gt;
  &lt;li&gt;Organisational/departmental environment feedback is likely to be measured/sampled in weeks or months.&lt;/li&gt;
  &lt;li&gt;World wide/market environment feedback is likely to be measured/sampled in quarters/bi-annually/annually.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Without going into an exhaustive list of metrics and techniques that might be used to provide feedback the following illustrations give you some ideas of what you might want to consider, but as always, there’s no silver bullet and YMMV.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-20-image2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Illustration 2: Software environment metrics &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The micro-ecosystem translates to the runtime environment and the software development practices used in developing the software. The illustration above gives some metrics and techniques that can provide feedback at that level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-20-image3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Illustration 3: Team/product environment metrics &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The biological concept of a Biotope (or habitat) translates to the team and/or product that the software is a part of and Illustration 3 gives some examples of metrics and techniques for feedback at this level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-20-image4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Illustration 4: Org/dept environment metrics &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Illustration 4 shows some examples of metrics and techniques to provide feedback at the organisation or departmental level.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-20-image5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: center&quot;&gt; Illustration 5: World wide/market environment metrics &lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Finally, Illustration 5 gives examples of potential feedback mechanisms at the level of the target market or in other markets.&lt;/p&gt;

&lt;p&gt;As you can see the example metrics I’ve suggested are a mix of measurements of the processes for producing/running software and the measurement of external factors that may impact or be impacted by that software. It’s important not to concentrate on only measuring the things you can change directly but also measure the factors that you only have indirect influence over to enable your software to evolve to those pressures too.&lt;/p&gt;

&lt;p&gt;Although I’ve given a number of metrics you should start by identifying between 2 and 5 metrics in each ecosystem level. I also try to map lower level metrics to metrics in the ecosystem above in order to ensure that a metric is driving the desired behaviour.&lt;/p&gt;

&lt;h2&gt;Building a responsive culture&lt;/h2&gt;
&lt;p&gt;Lastly, none of these techniques can be implemented effectively without a culture that embraces, seeks out, and thrives on change. The typical characteristics of this type of culture are all the things you see in agile and lean books/courses:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No blame culture&lt;/li&gt;
  &lt;li&gt;Empowerment of teams/individuals&lt;/li&gt;
  &lt;li&gt;Delegating responsibility and authority for entire problems to teams&lt;/li&gt;
  &lt;li&gt;Smaller teams to reduce communication networks&lt;/li&gt;
  &lt;li&gt;Clear, high-level targets/goals with clear measurable objectives (see ‘Fast appropriate feedback’)&lt;/li&gt;
  &lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, I think it’s important to emphasise this culture is something that needs to be pervasive throughout the whole organisation. It’s all very well having a software development team or department that has this culture but if the rest of the organisation interfacing with that group is in a strictly hierarchical command and control culture this will cause friction and ultimately be much less effective in responding to change. So what do you do if the organisation is not on board with this culture?&lt;/p&gt;

&lt;p&gt;Ideally you can convince the ‘C’ level management and the board that this culture is required and demonstrate how to achieve it through some ‘localised’ success by adopting some of the strategies suggested .&lt;/p&gt;

&lt;p&gt;However, I have found some success in tying the metrics that the ‘C’ level management look at, which tend to be either in the organisational/department environment or world wide/market environment, to the metrics in the ecosystems below to show how ‘moving the needle’ in one metric impacts the others. I’ve also found that this helps start the conversation about software not being a ‘cost’ to the organisation but it’s primary means of revenue generation in the future for most organisations. Demonstrating that software is not only about automating processes but about creating new ways to interact with customers in new markets. This in turn can provoke a move away from project focused development towards product/platform focused development.&lt;/p&gt;

&lt;p&gt;If you’re trying to convince the upper management/board of something, demonstrating how it impacts the metrics they care about is hugely powerful.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I’ve covered a lot of ground in this post. However, if there are only three things you take away from this I hope they would be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pick a couple of properties in each ecosystem that you wish to change and identify metrics for them (preferably linking lower level metrics with those higher up the ecosystems ‘ladder’)&lt;/li&gt;
  &lt;li&gt;Pick a couple of ‘constraints’ that you don’t yet implement that might help support the required changes above and think about how to implement those constraints&lt;/li&gt;
  &lt;li&gt;Use the constraints you pick to guide the ‘materials’ you use and the ‘culture’ you need. For example, if you want to deal with changes in data/message structure more effectively you may decide to concentrate on structural typing and accretion only approaches to interfaces and data storage. This might lead you to picking certain languages/libraries that support structural typing, easy parsing of data, tolerant reader pattern and immutable databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s no one-size-fits-all solution when it comes to evolutionary architecture. Instead, it’s important to gather feedback over an appropriate timescale, adjust your approaches as you learn and grow, and don’t try to change everything all at once.&lt;/p&gt;

&lt;p&gt;I hope this post has given you some food for thought and a few practical approaches to try.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/agile_geek&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Chris Howe-Jones&lt;/a&gt; is a consultant CTO, Software Architect, Lean/Agile Coach, Developer, and Technical Navigator for &lt;a href=&quot;http://devcycle.co.uk&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;DevCycle&lt;/a&gt;. He works mainly in Clojure/ClojureScript, Java, and Scala with clients from multi-national organizations down to small startups.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>Introduction to GraphQL </title>
        <link>https://circleci.com/blog/introduction-to-graphql/</link>
        <pubDate>Tue, 19 May 2020 09:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/introduction-to-graphql/</guid>
        
          <dc:creator>Fikayo Adepoju</dc:creator>
        
        
          <description>&lt;p&gt;&lt;i&gt;This post, written by guest writer Fikayo Adepoju, was originally published on The New Stack &lt;a href=&quot;https://thenewstack.io/introduction-to-graphql/&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The above definition is from the official &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt; website, but can we define GraphQL in simpler terms? I will take a few attempts defining it in just one sentence. Please note that these definitions are not official, but from my understanding of the technology:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GraphQL is a language designed for client applications to fetch the exact data needed from an API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GraphQL allows client applications to describe the type and shape of data required from a backend API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GraphQL enables client applications to call a single endpoint for any type of request.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GraphQL is like SQL, but for the frontend.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pardon my simplistic attempts at defining such a sophisticated technology, but each of these definitions captures the purpose of GraphQL in one way or another (I wouldn’t use the last one in an interview though :)). This is a high-level view of how GraphQL operates. By the end of this post, you will know it in more detail and be able to build something with it.&lt;/p&gt;

&lt;p&gt;So how did GraphQL come to be? What brought about this paradigm-shifting innovation?&lt;/p&gt;

&lt;p&gt;It turns out that GraphQL started at Facebook as a project by engineers Lee Byron, Dan Schafer, and Nick Schrock.&lt;/p&gt;

&lt;p&gt;The first prototype was developed in February 2012, and shipped in the Facebook iOS application around August of the same year. The technology itself was not open-sourced &lt;a href=&quot;https://engineering.fb.com/core-data/graphql-a-data-query-language/&quot;&gt;until 2015&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The developers on the mobile application needed to work with a lot of nested and interlinked data. To make the application performant, they needed to query the exact shape of the data they needed - to serve modules like the news feed, messaging, and the Facebook wall with posts, along with their respective comments, and likes, and likes for comments under the posts… do you see the problem?&lt;/p&gt;

&lt;p&gt;They eventually solved these issues with the technology we now know as GraphQL. While this is good for Facebook, how does this technology help us? How does it make our lives better?&lt;/p&gt;

&lt;h2&gt;Why GraphQL&lt;/h2&gt;
&lt;p&gt;Let’s assume you have a blog API that has users and these users create posts and that you can retrieve data similar to the collection below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[
  {
    id: 1,
    name: &quot;Fikayo Adepoju&quot;,
    email: &quot;fik4christ@yahoo.com&quot;,
    posts: [
      {
        id: 1,
        title: &quot;Debugging an Ionic Android App Using Chrome Dev Tools&quot;,
        published: true,
        link:
          &quot;https://medium.com/@coderonfleek/debugging-an-ionic-android-app-using-chrome-dev-tools-6e139b79e8d2&quot;,
        author: 1
      },
      {
        id: 2,
        title: &quot;Hosting a Laravel Application on Azure Web App&quot;,
        published: true,
        link:
          &quot;https://medium.com/@coderonfleek/hosting-a-laravel-application-on-azure-web-app-b55e12514c46&quot;,
        author: 1
      }
     ]
  },
  {
    id: 3,
    name: &quot;Jane Paul&quot;,
    email: &quot;jane@company.com&quot;,
    posts: []
  }
];

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The User data has these properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ID&lt;/li&gt;
  &lt;li&gt;name&lt;/li&gt;
  &lt;li&gt;email&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each user Post has these properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ID&lt;/li&gt;
  &lt;li&gt;title&lt;/li&gt;
  &lt;li&gt;published (boolean representing whether the post is published or not)
link (link to the article)&lt;/li&gt;
  &lt;li&gt;author (user’s ID)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now imagine that you need to build these three frontend components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A Profile component that shows user information&lt;/li&gt;
  &lt;li&gt;A Post component that displays a post, its link, and the author’s name&lt;/li&gt;
  &lt;li&gt;An Author component that shows a user’s details and list of post titles by the user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these components require different shapes of data. With a traditional REST API, each different shape of data would require its own endpoint or require tacking numerous, ugly query parameters to the endpoint. For example, when the frontend would request user data, there would be no way of specifying if you only want the ID and email of the user (no name), or you just want the name of the user. The API returns all of the user data. Good luck if your user data contains more parameters than the example above.&lt;/p&gt;

&lt;p&gt;You might ask, is it really that expensive to have all the user data returned? The answer is, as always, it depends.&lt;/p&gt;

&lt;p&gt;Imagine that you need to show all of the authors on the blog, but you only need to show the names of the authors. If you have fifty authors to display and your user is viewing the page from a mobile application, it will be quite expensive to download the complete user data for each of the fifty authors into the mobile app just to display their names.&lt;/p&gt;

&lt;p&gt;With GraphQL, the client is given control over the shape of data to query. The user can simply say something like this:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Get me the users but I only want their names, thank you.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;And the API responds with a collection of user data containing just the names of the authors. And you can do this from just one endpoint. Unlike REST, a GraphQL API exposes a single endpoint. This is the endpoint that serves all requests made by the client.&lt;/p&gt;

&lt;p&gt;I am sure our heart is now pumping with excitement and you just want to rewrite all of your APIs in GraphQL. Or as a front-end developer, start putting pressure on your API developers to supply you with GraphQL-only APIs. Relax, we are getting there.&lt;/p&gt;

&lt;h2&gt;How GraphQL queries work&lt;/h2&gt;

&lt;p&gt;So far we have learned that GraphQL is a language spoken by the client, but in what way does the client speak this language? What is the format for sending a request in GraphQL?&lt;/p&gt;

&lt;p&gt;Requests are made using a special format that is used to describe the data The best way to learn this format is to write some GraphQL queries. Let’s pick the three components in the last section and write queries for their respective data requests in GraphQL.&lt;/p&gt;

&lt;h3&gt;A Profile component that shows user information&lt;/h3&gt;
&lt;p&gt;This component requires a user’s information. In GraphQL, the request would be:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	user(id : 1){
		Id
		name
		email
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The request above queries the GraphQL endpoint with the user’s ID and gets back the ID, name, and email of the user.&lt;/p&gt;

&lt;h3&gt;A Post component that displays a post, its link, and the author’s name&lt;/h3&gt;
&lt;p&gt;This components requires a specific post and the name of the post’s author:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	post(id : 2){
		title
		link
		author {
			name
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The query above requests a single post by sending the ID of the post. The post is returned with the title and the link. The author of the post is also returned.&lt;/p&gt;

&lt;h3&gt;An Author component that shows a user’s details and list of post titles by the user&lt;/h3&gt;
&lt;p&gt;This component needs to get a user and the post titles authored by that user&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
	user(id : 2){
		email
		name
		posts {
			title
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The query above requests a user’s data and includes with it all the user’s posts, but only retrieves the titles of the posts. In the array of posts returned, only the title of the posts are contained in each post object.&lt;/p&gt;

&lt;p&gt;Let’s test out a query on a GraphQL demo created by one of my favourite authors, Andrew Mead. The demo is also based on an API that exposes users and their posts.&lt;/p&gt;

&lt;p&gt;We will query for all the users and the title of their posts. Try to write down the query all on your own before looking at the solution:&lt;/p&gt;

&lt;pre&gt;
{
	users{
		id
		name
		email
		posts{
			title
		}
	}
}

&lt;/pre&gt;

&lt;p&gt;Did you get it? The good thing about GraphQL APIs is that they are self-documenting and will flag any incorrect query and return helpful error messages.&lt;/p&gt;

&lt;p&gt;Now paste the query in the left window of the GraphQL playground at &lt;a href=&quot;https://graphql-demo.mead.io/&quot;&gt;https://graphql-demo.mead.io/&lt;/a&gt; then hit the play button to run the query. You will get something similar to the screen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-19-graphql1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;With this, you have a practical demonstration of how GraphQL works. Feel free to play with some queries on the query window to get a better understanding of how querying data works in GraphQL. Click on the little green tab on the right edge of the screen that reads &lt;strong&gt;SCHEMA&lt;/strong&gt; to inspect the structure of the data the API exposes.&lt;/p&gt;

&lt;h2&gt;How to resolve GraphQL queries&lt;/h2&gt;
&lt;p&gt;Remember those simple points we made about GraphQL at the beginning of this article? One of those points is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It (GraphQL) is used to communicate with a backend API&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that our API must be able to read and understand GraphQL queries.&lt;/p&gt;

&lt;p&gt;Breaking news!&lt;/p&gt;

&lt;p&gt;The bulk of the work that needs to be done in implementing GraphQL APIs is done in the backend.&lt;/p&gt;

&lt;p&gt;Sorry backend developers.&lt;/p&gt;

&lt;p&gt;We need to expose a GraphQL endpoint from our backend that clients can query to get data as-needed.&lt;/p&gt;

&lt;p&gt;So how do we do that?&lt;/p&gt;

&lt;p&gt;At the backend, we need to create an interface that exposes the data we have available to the client.&lt;/p&gt;

&lt;p&gt;Let’s take a look at our blog API. We have data for Users and we have data for Posts. Those are two separate entities. In GraphQL we need to define these by creating a schema.&lt;/p&gt;

&lt;p&gt;In GraphQL, entities (or whatever convenient term you use for independent pieces of data, e.g. models) are represented by types. Therefore, we need to define a User type and a Post type in our schema. A type definition simply lists the properties available to the client of that type. Below is how we define types for our User and Post types:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type User {
        id: Int!
        name: String!
        email: String
        posts: [Post!]
}

type Post {
    id: Int!
    title: String!
    published: Boolean!
    link: String
    author: User!
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break these down. Types are defined as key/value pairs, the keys being the properties you wish to expose while the values are standard GraphQL data types or custom types.&lt;/p&gt;

&lt;p&gt;GraphQL ships with several default types, the most common ones being the scalar types. There are five scalar types for defining the datatype of any property you are returning from the API. These are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ID:&lt;/strong&gt; defines a field with a unique identifier&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Int:&lt;/strong&gt; A signed 32‐bit integer&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Float:&lt;/strong&gt; A signed double-precision floating-point value&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;String:&lt;/strong&gt; A UTF‐8 character sequence&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Boolean:&lt;/strong&gt; true or false&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also define custom scalar types, but that is beyond the scope of this introductory post.&lt;/p&gt;

&lt;p&gt;The User and Post types that we just defined are custom types. Observe that we have a post’s property on the User type set to the custom type Post, this returns an array of posts belonging to a user. We also have an author property on the Post type which returns the details of the author of a post.&lt;/p&gt;

&lt;p&gt;The exclamation marks (!) indicate non-nullable fields. Any field without an exclamation mark can return null.&lt;/p&gt;

&lt;p&gt;To query these types, we need to define one of GraphQL’s default types, the Query type.&lt;/p&gt;

&lt;p&gt;The Query type is used to define data points for querying. For example, if we write the following query:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
     users {
	name
	email
     }
}
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It means that a users data querying point has been defined inside the Query type. A typical Query type definition looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Query {
    users: [User!]!,
    user(id: Int!): User!
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This definition exposes two querying points. The first one, users can fetch a collection of users. The second one, user, can fetch a single user given the id of the user.&lt;/p&gt;

&lt;p&gt;Now this is all well and good but I am sure you’re asking, how will I connect these query points to my data source? And how will I ensure that only the properties the client requests get returned? We can answer the first question with another concept in GraphQL known as Resolvers. The second question is handled by GraphQL itself so we don’t have to worry about it.&lt;/p&gt;

&lt;p&gt;Resolvers are functions that map to your querying points to return the entity requested.&lt;/p&gt;

&lt;p&gt;For example, our data source is an array of users.  A resolver for the users query point will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function () {
	return usersArray;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A resolver for the user query point will look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function ({ id }){
	return  usersArray.find((user) =&amp;gt; user.id == id);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Don’t get too attached to the syntax, as various programming languages have their own ways of writing resolver functions.&lt;/p&gt;

&lt;p&gt;In summary::&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Custom types are defined for each data entity/model&lt;/li&gt;
  &lt;li&gt;The Query type is used to expose various query points as needed&lt;/li&gt;
  &lt;li&gt;Resolvers are used to resolve queries to each query point&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you may be asking, how do I get this done in PHP, or Node.js, or Python, or any other back-end language? Don’t fret, that is exactly what we will discuss in the next section.&lt;/p&gt;

&lt;h2&gt;Using GraphQL with existing backends&lt;/h2&gt;
&lt;p&gt;We still have the following questions to answer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How do I implement these concepts in my preferred back end language?&lt;/li&gt;
  &lt;li&gt;How do Types, Query types, and Resolvers fit together into one GraphQL API?&lt;/li&gt;
  &lt;li&gt;How do I expose the single (magical) endpoint that answers all my queries?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GraphQL is language-agnostic, so none of the above concepts rely on any specific language. The concepts apply across all languages that currently support GraphQL.&lt;/p&gt;

&lt;p&gt;As for the implementation, there are libraries for all popular back end languages that you can use to implement a GraphQL API.&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://graphql.org/code/#server-libraries&quot;&gt;Server Libraries&lt;/a&gt; page of GraphQL’s official website, you will find libraries for backend languages/frameworks like C#, Node.js (Javascript), Go, PHP, Java, etc.&lt;/p&gt;

&lt;p&gt;With these libraries and a good grasp of the concepts you have learned so far, you can get a GraphQL server up and running in no time.&lt;/p&gt;

&lt;h2&gt;Building a simple GraphQL server with Node.js&lt;/h2&gt;
&lt;p&gt;We will be building a simple GraphQL server in Node.js which uses a static data store (in production this data will mostly come from a database).&lt;/p&gt;

&lt;p&gt;The only requirement for this exercise is having Node.js (which comes with NPM) installed on your system.&lt;/p&gt;

&lt;p&gt;So let’s begin. First, make a directory for the project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir graphql-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good, now go into the root of your project and run the following command to quickly scaffold a package.json file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are going to need three packages from npm which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;: to create a simple Node.js server&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/graphql&quot;&gt;GraphQL&lt;/a&gt;: the GraphQL server library for Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/graphql/express-graphql&quot;&gt;Express-GraphQL&lt;/a&gt;: Express middleware for composing a GraphQL server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s install these packages in one go by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install express graphql express-graphql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the installation is done, let’s begin putting together our GraphQL server.&lt;/p&gt;

&lt;p&gt;The first thing we will do is create our static data store and export it. Create a file named data.js at the root of the project and fill it with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* data.js */

const Users = [
  {
    id: 1,
    name: &quot;Fikayo Adepoju&quot;,
    email: &quot;fik4christ@yahoo.com&quot;,
    posts: [
      {
        id: 1,
        title: &quot;Debugging an Ionic Android App Using Chrome Dev Tools&quot;,
        published: true,
        link:
          &quot;https://medium.com/@coderonfleek/debugging-an-ionic-android-app-using-chrome-dev-tools-6e139b79e8d2&quot;,
        author: 1
      },
      {
        id: 2,
        title: &quot;Hosting a Laravel Application on Azure Web App&quot;,
        published: true,
        link:
          &quot;https://medium.com/@coderonfleek/hosting-a-laravel-application-on-azure-web-app-b55e12514c46&quot;,
        author: 1
      }
     ]
  },
  {
    id: 3,
    name: &quot;Jane Paul&quot;,
    email: &quot;jane@company.com&quot;,
    posts: []
  }
];


module.exports = {
  Users
};

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file exports a collection of user data and each user’s posts.&lt;/p&gt;

&lt;p&gt;Next, let’s build our schema and export it. Create a file named schema.js at the root of your project and enter the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* schema.js */

const { buildSchema } = require(&quot;graphql&quot;);

const schema = buildSchema(`
    type Query {
        users: [User!]!,
        user(id: Int!): User!
    }


    type User {
        id: ID!
        name: String!
        email: String
        posts: [Post!]
    }

    type Post {
        id: ID!
        title: String!
        published: Boolean!
        link: String
        author: User!
    }
`);

module.exports = schema;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this file, we use the buildSchema method from Node.js’s GraphQL library to set up our schema. We create two custom types, User and Post, then expose users and user query points in our query definition.&lt;/p&gt;

&lt;p&gt;Next, let’s build the resolvers that will handle these queries. Create a file named resolvers.js at the root of the project and enter the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* resolvers.js*/

const {Users} = require('./data')

const resolvers = {
  users: async (_) =&amp;gt; {
    return Users;
  },
  user: async ({ id }, context) =&amp;gt; {
    return Users.find((user) =&amp;gt; user.id == id)
  }
};

module.exports = resolvers;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this file, we import our Users collection from data.js and use it to return the appropriate data in our resolvers for the users and user query points.&lt;/p&gt;

&lt;p&gt;Time to connect our schema to our resolvers and expose our GraphQL endpoint.&lt;/p&gt;

&lt;p&gt;Create a file named index.js at the root of the project and enter the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* index.js */

const express = require(&quot;express&quot;);
const graphqlHTTP = require(&quot;express-graphql&quot;);
const schema = require(&quot;./schema&quot;);
const resolvers = require(&quot;./resolvers&quot;);


const app = express();

app.use(
  &quot;/graphql&quot;,
  graphqlHTTP({
    schema,
    rootValue: resolvers,
    graphiql: true
  })
);


const port = process.env.PORT || 4200;

app.listen(port);

console.log(`🚀 Server ready at http://localhost:4200/graphql`);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above file, we create an ExpressJS application and use the express-graphql middleware package to connect our schema to our resolvers and expose our GraphQL API at the endpoint /graphql.&lt;/p&gt;

&lt;p&gt;We also set a third parameter graphiql : true. This was done to enable the &lt;a href=&quot;https://github.com/graphql/graphiql&quot;&gt;GraphiQL&lt;/a&gt; tool. GraphiQL (notice the i) is a web-based GUI for testing our GraphQL queries. This tool comes shipped with the GraphQL package.&lt;/p&gt;

&lt;p&gt;Finally, we set our server to listen on port 4200.&lt;/p&gt;

&lt;p&gt;Now, let’s take our GraphQL server for a spin.&lt;/p&gt;

&lt;p&gt;Boot up the server by running the following command at the root of your project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The console message should indicate that the server is now running at port 4200.&lt;/p&gt;

&lt;p&gt;Go into your favorite browser and visit &lt;a href=&quot;http://localhost:4200/graphql&quot;&gt;http://localhost:4200/graphql&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-19-graphql2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;Now run the following query in the query window:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  users {
	  name
	  email
	  posts  {	
          title
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hit the play button and you will see the screen below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-19-graphql3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Feel free to run more queries in the GraphiQL window to get more familiar with how they work.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Docs&lt;/strong&gt; at the top right-hand corner to open up a window that shows the schema. This will help you get familiar with the schema and what a powerful luxury that is to write code and have the API automatically documented.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What a journey! We went from little understanding of GraphQL to building a simple GraphQL server. There is definitely a lot more to GraphQL than we have touched on in this post. Things like creating a new user and editing user data, saving new posts and paginating your results. Yeah, GraphQL is that powerful. I have also written posts that add &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continuous integration&lt;/a&gt; pipelines to GraphQL APIs. Check out &lt;a href=&quot;https://thenewstack.io/automatic-testing-for-graphql-apis/&quot;&gt;Automatic testing for GraphQL APIs&lt;/a&gt; and &lt;a href=&quot;https://circleci.com/blog/continuous-deployment-of-an-express-graphql-server-to-heroku/&quot;&gt;Continuous deployment of an Express GraphQL server to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more information about GraphQL, visit the &lt;a href=&quot;https://graphql.org/&quot;&gt;official GraphQL site&lt;/a&gt; and also check out the &lt;a href=&quot;https://graphql.org/code/&quot;&gt;server library&lt;/a&gt; for your back-end language of choice.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/coderonfleek?lang=en&quot;&gt;Fikayo&lt;/a&gt; is a fullstack developer and author with over a decade of experience developing web and mobile solutions. He is currently the Software Lead at Tech Specialist Consulting and develops courses for Packt and Udemy. He has a strong passion for teaching and hopes to become a full-time author.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>Creating a custom Docker image to run your CI builds</title>
        <link>https://circleci.com/blog/creating-a-custom-docker-image-to-run-your-ci-builds/</link>
        <pubDate>Tue, 19 May 2020 09:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/creating-a-custom-docker-image-to-run-your-ci-builds/</guid>
        
          <dc:creator>Ricardo N Feliciano</dc:creator>
        
        
          <description>&lt;p&gt;This guide provides tips on how to create an effective Docker image to be used as the primary image in the &lt;a href=&quot;/docs/2.0/executor-types/#using-docker&quot;&gt;Docker executor&lt;/a&gt;. All steps within the job, including orb commands, will execute in this image. This guide does not, however, cover how to build and publish a Docker image that will then be used in your production environment or to distribute your open source application.&lt;/p&gt;

&lt;p&gt;I’d like you to ask yourself, are you sure you want to do this? There are many people who don’t want to install a few packages at run-time because it will increase their build time by 20-45 seconds. They then invest several hours figuring out how to create their own Docker image, and then more time over months and years to maintain that image. Sometimes it’s not worth the effort.&lt;/p&gt;

&lt;p&gt;In situations where lots of packages need to be installed, source code needs to be compiled, or downloads occur over slow connections, this is the sweet spot where your own custom Docker image will shine.&lt;/p&gt;

&lt;p&gt;Still interested? Great, let’s get started.&lt;/p&gt;

&lt;h2&gt;Writing the Dockerfile&lt;/h2&gt;

&lt;p&gt;Everything begins and ends with the Dockerfile. It is the blueprint from which a Docker image is created. Visit Docker’s &lt;a href=&quot;https://docs.docker.com/get-started/part2/&quot;&gt;Getting Started - Part 2&lt;/a&gt; guide for more information about the Dockerfile.&lt;/p&gt;

&lt;p&gt;The base image&lt;/p&gt;

&lt;p&gt;A Dockerfile typically starts with the &lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; statement which declares the base image your new image will use. While in no way required, we strongly recommend using the CircleCI base convenience image as your base image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM cimg/base:stable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The CircleCI base image serves as the base for all of the next-gen convenience images. You can learn more about all of the new images &lt;a href=&quot;https://circleci.com/blog/announcing-our-next-generation-convenience-images-smaller-faster-more-deterministic/&quot;&gt;here&lt;/a&gt;. It’s designed from the ground up to work well on CircleCI. It has all the required tools, as well as the most common tools, that the majority of our customers need. For example, the &lt;a href=&quot;/docs/2.0/configuration-reference/#checkout&quot;&gt;checkout&lt;/a&gt; special step requires &lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; to be installed in the Docker image. The &lt;a href=&quot;/docs/2.0/configuration-reference/#save_cache&quot;&gt;save_cache&lt;/a&gt; and &lt;a href=&quot;/docs/2.0/configuration-reference/#persist_to_workspace&quot;&gt;persist_workspace&lt;/a&gt; special steps, as well as their loading equivalents, require &lt;code class=&quot;highlighter-rouge&quot;&gt;tar&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;gzip&lt;/code&gt; installed. Our base image includes all of these tools and we ensure that the list of software is maintained as additional requirements arise or are removed.&lt;/p&gt;

&lt;p&gt;This image is also fairly popular on our platform which means there are cache benefits to be obtained by basing your image on our base image. You can learn more about the CircleCI base convenience image and how to use it on its GitHub page. If you choose to use a different base image, I’d suggest at least visiting the &lt;a href=&quot;https://github.com/CircleCI-Public/cimg-base&quot;&gt;GitHub page&lt;/a&gt; to see what packages we install so you can copy that list for yourself.&lt;/p&gt;

&lt;h3&gt;Installing and downloading software&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y \
        bison \
        llvm \
        zlib1g-dev \
        xz-utils &amp;amp;&amp;amp; \
    rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example there are several best practices we can learn from:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When using an image that doesn’t run as the root user, you need to prefix some commands with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In scripting scenarios, always use &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; over &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt;. The former is better for environments where humans aren’t around while the latter is better when tinkering away on your own local computer.&lt;/li&gt;
  &lt;li&gt;When installing with a package manager, flags like &lt;code class=&quot;highlighter-rouge&quot;&gt;-y&lt;/code&gt; are used to assume “yes” when the package manager might have tried to ask a question.&lt;/li&gt;
  &lt;li&gt;Listing a single package per line, alphabetically. Works wonders with using git and GitHub. It makes reading the source much more enjoyable and when viewing PR diffs, it’s very clear which packages are added or removed.&lt;/li&gt;
  &lt;li&gt;The last line deletes the Apt cache in the image. This helps with caching, but more importantly reduces the size of the image.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;ENV GO_VERSION=1.14.1
RUN curl -sSL &quot;https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz&quot; | \
    sudo tar -xz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example gives us two more tips:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Setting frequently changing strings as an environment variable makes it visually much easier to manage changes. Especially since the ENV instruction doesn’t count as a layer in Docker. This technique drastically increases in efficiency when the value is used multiple times in upcoming &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; instructions.&lt;/li&gt;
  &lt;li&gt;Here cURL downloads a tarball and pipes it directly into the next command, tar. This allows us to avoid saving the file to the filesystem which is faster, as well as avoiding cleaning up the tarball afterward. In situations where you can’t use this technique, don’t forget to clean up after yourself by deleting the tarball, zip package, etc with &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Caching and efficiency&lt;/h3&gt;
&lt;p&gt;The order of instructions are important for larger images. You want &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; steps that change more frequently towards the bottom of the Dockerfile, while steps that change less often should be ordered towards the top. This is because Docker caches images by layers. Whenever a layer changes, that layer and the layers below it need to be re-cached. This behavior is explained in much more detail in Docker’s &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&quot;&gt;Dockerfile best practices guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another efficiency item is that image layers should be as lean as possible. Files that are not needed should be deleted within the &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; step it was created, which keeps the overall size of that layer smaller.&lt;/p&gt;

&lt;h2&gt;Maintaining the image&lt;/h2&gt;
&lt;p&gt;Creating a custom image is only half the job. Once that image exists, maintenance needs to occur. As your CI requirements change and grow, your image will need to adapt along with it.&lt;/p&gt;

&lt;h3&gt;A home for your Dockerfile&lt;/h3&gt;
&lt;p&gt;Keep your Dockerfile under version control. Some people prefer to keep this Dockerfile in the same repository as the project they need it for. Others, like myself, prefer to put it in its own repository.&lt;/p&gt;

&lt;p&gt;I prefer the separate repo route because:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When it’s in the same repo as the project, the CircleCI config for that project gets more complex. You don’t want to build the Docker image on every commit to the main project. That’s an expensive waste of time. To avoid this, you’ll need logic to separate when the project and the image get built.&lt;/li&gt;
  &lt;li&gt;As a separate repo, it makes using the image for more than one project at your company or team much easier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Keeping the Dockerfile up-to-date&lt;/h3&gt;
&lt;p&gt;When adding or removing something from a Dockerfile, create a new branch with your changes, review, and merge. Standard stuff. There are parts of a Docker image that get updated outside of your Dockerfile. How do we keep those parts updated?&lt;/p&gt;

&lt;p&gt;Your base image is its own project and gets updated on its own schedule. For example, the CircleCI base convenience Image gets stable updates once a month. If you download and install software with a file name such as &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com/download/some-thing-4.3.x.tar.gz&lt;/code&gt;, you’ll want to make sure you’re updating your image with the latest patch version available for that software. We do this with CircleCI &lt;a href=&quot;/docs/2.0/workflows/&quot;&gt;scheduled workflows&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Publishing your custom Docker image using a scheduled workflow allows you to keep the background pieces of your image regularly updated without any manual work from you. The frequency for this depends on your personal needs. The CircleCI base image updates on the 2nd of every month. If you’re using that as a base, your own monthly scheduled workflow on the 3rd or 5th would work well.&lt;/p&gt;

&lt;h3&gt;Hosting the image&lt;/h3&gt;
&lt;p&gt;You have options on where to host your published Docker image. Where you host a Docker image is called a Docker Registry. The de facto place to host a Docker image is Docker Hub. If you’re unfamiliar with any other registry, stick to DockerHub and you’ll be fine. It’s free to use, even for a private image.&lt;/p&gt;

&lt;p&gt;If you’re using a leading cloud provider for hosting, they likely have a Docker registry you can use and we likely have a &lt;a href=&quot;https://circleci.com/orbs/&quot;&gt;CircleCI orb&lt;/a&gt; for that provider, making setup for all of this easier. Here are the major Docker registries and the corresponding orbs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DockerHub - by Docker: &lt;a href=&quot;https://hub.docker.com/&quot;&gt;website&lt;/a&gt; / &lt;a href=&quot;https://circleci.com/orbs/registry/orb/circleci/docker&quot;&gt;orb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GCR - by Google Cloud: &lt;a href=&quot;https://cloud.google.com/container-registry&quot;&gt;website&lt;/a&gt; / &lt;a href=&quot;https://circleci.com/orbs/registry/orb/circleci/gcp-gcr&quot;&gt;orb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ECR - by AWS: &lt;a href=&quot;https://aws.amazon.com/ecr/&quot;&gt;website&lt;/a&gt; / &lt;a href=&quot;https://circleci.com/orbs/registry/orb/circleci/aws-ecr&quot;&gt;orb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ACR - by Azure: &lt;a href=&quot;https://azure.microsoft.com/en-us/services/container-registry/#features&quot;&gt;website&lt;/a&gt; / &lt;a href=&quot;https://circleci.com/orbs/registry/orb/circleci/azure-acr&quot;&gt;orb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Artifactory - by JFrog: &lt;a href=&quot;https://jfrog.com/artifactory/&quot;&gt;website&lt;/a&gt; / &lt;a href=&quot;https://circleci.com/orbs/registry/orb/jfrog/artifactory-orb&quot;&gt;orb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Discussion and feedback&lt;/h2&gt;
&lt;p&gt;To discuss this topic some more or to ask questions, please visit our &lt;a href=&quot;https://discuss.circleci.com/&quot;&gt;CircleCI Discuss&lt;/a&gt; forum. You can find me and CircleCI users just like you who are ready to discuss and help.&lt;/p&gt;
</description>
        
      </item>
    
      
      <item>
        <title>Continuous integration for Ionic applications</title>
        <link>https://circleci.com/blog/continous-integration-for-ionic-apps/</link>
        <pubDate>Mon, 18 May 2020 17:00:00 -0700</pubDate>
        <guid isPermaLink="true">https://circleci.com/blog/continous-integration-for-ionic-apps/</guid>
        
          <dc:creator>Fikayo Adepoju</dc:creator>
        
        
          <description>&lt;p&gt;In the world of hybrid mobile development, no other framework has done more for the industry than the &lt;a href=&quot;https://ionicframework.com/&quot;&gt;Ionic framework&lt;/a&gt;. Created in 2013 and originally built on &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular.js&lt;/a&gt; and &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Apache Cordova&lt;/a&gt;, Ionic has grown to a full-featured application framework for developing mobile, desktop, and &lt;a href=&quot;https://web.dev/progressive-web-apps/&quot;&gt;progressive web applications&lt;/a&gt;. Ionic has also become framework-agnostic, allowing developers to use &lt;a href=&quot;https://angular.io/&quot;&gt;Angular.js&lt;/a&gt;, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt;, or &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; for development.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be building a handy task manager. We will write tests for features in the application and set up a &lt;a href=&quot;https://circleci.com/continuous-integration/&quot;&gt;continous integration&lt;/a&gt; (CI) pipeline to automate our development and testing. We will be developing our application using &lt;a href=&quot;https://ionicframework.com/react&quot;&gt;Ionic React&lt;/a&gt;, the Ionic version that supports developing using &lt;a href=&quot;https://reactjs.org/&quot;&gt;React.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;To follow this post, a few things are required:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Basic knowledge of React.js (Not a deal-breaker, you only have to copy-paste the code snippets)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; installed on your system&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://ionicframework.com/docs/cli&quot;&gt;Ionic CLI&lt;/a&gt; installed on your system&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://circleci.com/&quot;&gt;CircleCI&lt;/a&gt; account&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Scaffolding the Ionic application&lt;/h2&gt;

&lt;p&gt;To begin, let’s scaffold a new Ionic application by running the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic start task-manager tabs --type=react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will immediately trigger the Ionic CLI to scaffold a new project for us using the &lt;code class=&quot;highlighter-rouge&quot;&gt;tabs&lt;/code&gt; template inside a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;task-manager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;i&gt;You might be prompted at some point with &lt;code class=&quot;highlighter-rouge&quot;&gt;Create free Ionic account?&lt;/code&gt;. Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; to decline. For more information on creating an Ionic account see &lt;a href=&quot;https://ionicframework.com/appflow&quot;&gt;here&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, go into the root of the application (&lt;code class=&quot;highlighter-rouge&quot;&gt;cd task-manager&lt;/code&gt;) and run the following command to serve the application in your web browser:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ionic serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this command has completed, you will see an application view in your browser similar to the one below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;i&gt;I am using a mobile preview activated in Chrome’s development tools.&lt;/i&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/media/2020-05-16-scaffold-preview.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Don’t be surprised if yours has a black background and white font. It uses the default mode of your machine.&lt;/p&gt;

&lt;h2&gt;Building the Task Manager application&lt;/h2&gt;

&lt;p&gt;Next, let’s begin building the main application. Go into the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/pages&lt;/code&gt; folder of your application and open the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.tsx&lt;/code&gt; file. This is the default home page for the newly scaffolded application. Remove everything in this file and replace it with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// src/pages/Tab1.tsx

import React, { useState } from &quot;react&quot;;
import {
  IonContent,
  IonHeader,
  IonPage,
  IonTitle,
  IonToolbar,
  IonList,
  IonItemSliding,
  IonItem,
  IonLabel,
  IonItemOptions,
  IonItemOption,
  IonFab,
  IonFabButton,
  IonIcon,
  IonModal,
  IonButton,
  IonCard,
  IonCardContent,
  IonInput,
} from &quot;@ionic/react&quot;;

import { add } from &quot;ionicons/icons&quot;;

import &quot;./Tab1.css&quot;;

interface Task {
  id: number;
  name: string;
}

const Tab1: React.FC = () =&amp;gt; {
  const [tasks, setTasks] = useState&amp;lt;Task[]&amp;gt;([]);
  const [showModal, setShowModal] = useState(false);
  const [taskName = &quot;&quot;, setTaskName] = useState&amp;lt;string&amp;gt;();

  function addNewTask() {
    const new_id = tasks.length + 1;

    const newTask = {
      id: new_id,
      name: taskName,
    };

    tasks.push(newTask);

    setTasks(tasks);

    setTaskName(&quot;&quot;);

    setShowModal(false);
  }

  return (
    &amp;lt;IonPage&amp;gt;
      &amp;lt;IonHeader&amp;gt;
        &amp;lt;IonToolbar&amp;gt;
          &amp;lt;IonTitle&amp;gt;Task Manager&amp;lt;/IonTitle&amp;gt;
        &amp;lt;/IonToolbar&amp;gt;
      &amp;lt;/IonHeader&amp;gt;
      &amp;lt;IonContent&amp;gt;
        &amp;lt;IonList&amp;gt;
          {tasks.length &amp;gt; 0 ? (
            tasks.map((item: Task) =&amp;gt; {
              return (
                &amp;lt;IonItemSliding key={item.id}&amp;gt;
                  &amp;lt;IonItem className=&quot;todo-item&quot;&amp;gt;
                    &amp;lt;IonLabel&amp;gt;{item.name}&amp;lt;/IonLabel&amp;gt;
                  &amp;lt;/IonItem&amp;gt;
                  &amp;lt;IonItemOptions side=&quot;end&quot;&amp;gt;
                    &amp;lt;IonItemOption onClick={() =&amp;gt; {}}&amp;gt;Done&amp;lt;/IonItemOption&amp;gt;
                  &amp;lt;/IonItemOptions&amp;gt;
                &amp;lt;/IonItemSliding&amp;gt;
              );
            })
          ) : (
            &amp;lt;IonItem&amp;gt;
              &amp;lt;IonLabel&amp;gt;You have yet to add tasks for today&amp;lt;/IonLabel&amp;gt;
            &amp;lt;/IonItem&amp;gt;
          )}
        &amp;lt;/IonList&amp;gt;

        {/* Modal*/}
        &amp;lt;IonModal isOpen={showModal}&amp;gt;
          &amp;lt;IonCard&amp;gt;
            &amp;lt;IonItem&amp;gt;
              &amp;lt;IonLabel&amp;gt;Add New Task&amp;lt;/IonLabel&amp;gt;
            &amp;lt;/IonItem&amp;gt;

            &amp;lt;IonCardContent&amp;gt;
              &amp;lt;IonItem&amp;gt;
                &amp;lt;IonInput
                  value={taskName}
                  placeholder=&quot;Enter Task Name...&quot;
                  onIonChange={(e) =&amp;gt; setTaskName(e.detail.value!)}
                &amp;gt;&amp;lt;/IonInput&amp;gt;
              &amp;lt;/IonItem&amp;gt;

              &amp;lt;IonButton
                expand=&quot;full&quot;
                color=&quot;primary&quot;
                onClick={() =&amp;gt; addNewTask()}
              &amp;gt;
                Add Task
              &amp;lt;/IonButton&amp;gt;
            &amp;lt;/IonCardContent&amp;gt;
          &amp;lt;/IonCard&amp;gt;
          &amp;lt;IonButton onClick={() =&amp;gt; setShowModal(false)}&amp;gt;Close Modal&amp;lt;/IonButton&amp;gt;
        &amp;lt;/IonModal&amp;gt;

        {/* Add Task Button */}
        &amp;lt;IonFab vertical=&quot;bottom&quot; horizontal=&quot;end&quot; slot=&quot;fixed&quot;&amp;gt;
          &amp;lt;IonFabButton onClick={() =&amp;gt; setShowModal(true)}&amp;gt;
            &amp;lt;IonIcon icon={add} /&amp;gt;
          &amp;lt;/IonFabButton&amp;gt;
        &amp;lt;/IonFab&amp;gt;
      &amp;lt;/IonContent&amp;gt;
    &amp;lt;/IonPage&amp;gt;
  );
};

export default Tab1;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s go through the code snippet above. This is the entire code for our Task Manager application.&lt;/p&gt;

&lt;p&gt;We start by importing the necessary dependencies including the css file for our page. We then define an interface to define our task objects.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;interface Task {
  id: number;
  name: string;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we create our component as a React function component type &lt;code class=&quot;highlighter-rouge&quot;&gt;React.FC&lt;/code&gt; and begin the function by defining the data we want to hold in our state using hooks: a &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; array of &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&lt;/code&gt;s, a &lt;code class=&quot;highlighter-rouge&quot;&gt;showModal&lt;/code&gt; boolean to control the opening and closing of our task creation form, and &lt;code class=&quot;highlighter-rouge&quot;&gt;taskName&lt;/code&gt; which holds the value of a new task in the process of creation.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const [tasks, setTasks] = useState&amp;lt;Task[]&amp;gt;([]);
const [showModal, setShowModal] = useState(false);
const [taskName = &quot;&quot;, setTaskName] = useState&amp;lt;string&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Following these is the function that we call to add a new task. This function creates a new task by setting its &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; based on the length of the array and clears the form after adding the new task to our existing list of tasks.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function addNewTask() {
  const new_id = tasks.length + 1;

  const newTask = {
    id: new_id,
    name: taskName,
  };

  tasks.push(newTask);

  setTasks(tasks);

  setTaskName(&quot;&quot;);

  setShowModal(false);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we render our template to display our list of tasks and also display a helpful message that reads &lt;code class=&quot;highlighter-rouge&quot;&gt;You have yet to add tasks for today&lt;/code&gt; when the task list is empty.&lt;/p&gt;

&lt;p&gt;Following the list is a modal component that contains our task form for adding new tasks. Below the component is a floating action button that the user clicks to open the modal.&lt;/p&gt;

&lt;p&gt;Before we preview this, open &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.css&lt;/code&gt; located in the same folder as &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.tsx&lt;/code&gt; and replace its contents with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* src/pages/Tab1.css */

.todo-item {
  --min-height: 70px;
  font-size: 1.2em;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This simply bumps up the height and font-size of the list items.&lt;/p&gt;

&lt;p&gt;Now, go to your browser and load the homepage of your application (Tab1). You will see the page displayed below.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/media/2020-05-16-home-no-tasks.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Because we haven’t added any tasks yet, we have the message &lt;strong&gt;You have yet to add tasks for today&lt;/strong&gt; displayed. We also have our &lt;strong&gt;Add Task&lt;/strong&gt; button in the bottom right corner with the &lt;code class=&quot;highlighter-rouge&quot;&gt;plus&lt;/code&gt; symbol.&lt;/p&gt;

&lt;h2&gt;Adding tasks&lt;/h2&gt;

&lt;p&gt;To add a new task, click the bottom-right blue button to pull up the task creation form and type in a task as shown below.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/media/2020-05-16-add-task.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Click &lt;strong&gt;ADD TASK&lt;/strong&gt; to add the task and go ahead to add 2 to 3 more tasks. We should now have enough tasks on the page for our application to look functional.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/media/2020-05-16-task-list.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Now we have a functional application. Not production-ready, but good enough to start testing.&lt;/p&gt;

&lt;h2&gt;Adding tests to the Task Manager application&lt;/h2&gt;

&lt;p&gt;One advantage that we have with testing our Ionic applications is that while scaffolding the application, the Ionic CLI has set up all that the application needs, in terms of packages and configurations, for testing.&lt;/p&gt;

&lt;p&gt;Testing Ionic React applications is done using the &lt;a href=&quot;https://jestjs.io/&quot;&gt;Jest&lt;/a&gt; testing framework together with the &lt;a href=&quot;https://testing-library.com/docs/react-testing-library/intro&quot;&gt;React Testing Library&lt;/a&gt; and the &lt;a href=&quot;https://github.com/ionic-team/ionic-react-test-utils&quot;&gt;Ionic React Test Utils&lt;/a&gt; library which is a small suite of utilities to simulate common features in Ionic like firing custom Ionic events.&lt;/p&gt;

&lt;p&gt;The project already comes with a test file for the &lt;code class=&quot;highlighter-rouge&quot;&gt;App.tsx&lt;/code&gt; file inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder. As you may have guessed, the test file is named &lt;code class=&quot;highlighter-rouge&quot;&gt;App.test.tsx&lt;/code&gt; which follows the convention for Jest tests.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// src/App.test.tsx

import React from &quot;react&quot;;
import { render } from &quot;@testing-library/react&quot;;
import App from &quot;./App&quot;;

test(&quot;renders without crashing&quot;, () =&amp;gt; {
  const { baseElement } = render(&amp;lt;App /&amp;gt;);
  expect(baseElement).toBeDefined();
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test simply checks that the application renders properly and does not crash.&lt;/p&gt;

&lt;p&gt;To run this test, run the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will invoke the &lt;code class=&quot;highlighter-rouge&quot;&gt;jest&lt;/code&gt; command to run the test defined in the file. As directed, press &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; to run all tests. The above command is the command we will be using to run all tests in our application.&lt;/p&gt;

&lt;p&gt;Now, let’s add some tests of our own. We will be creating a test file to test the application logic we have in our &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.tsx&lt;/code&gt; file which houses our application.&lt;/p&gt;

&lt;p&gt;Create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.test.tsx&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/pages&lt;/code&gt; folder. It’s the same place that the &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab1.tsx&lt;/code&gt; file is located. Inside the newly created file, place in the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// src/pages/Tab1.test.tsx

import React from &quot;react&quot;;
import { render } from &quot;@testing-library/react&quot;;
import Tab1 from &quot;./Tab1&quot;;

test(&quot;Page title is Task Manager&quot;, async () =&amp;gt; {
  const { findByText } = render(&amp;lt;Tab1 /&amp;gt;);
  await findByText(&quot;Task Manager&quot;);
});

test(&quot;When there are no Tasks, inform the user that no tasks have been created&quot;, async () =&amp;gt; {
  const { findByText } = render(&amp;lt;Tab1 /&amp;gt;);
  await findByText(&quot;You have yet to add tasks for today&quot;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this file, we have added two tests. The first test checks if our page displays with the correct title which is &lt;strong&gt;Task Manager&lt;/strong&gt;. The second test checks if our application initially loads without tasks, and if it does, it displays the message &lt;strong&gt;You have yet to add tasks for today&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Great!&lt;/p&gt;

&lt;p&gt;Now, let’s run these tests by running the following command at the root of our project:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You will see a screen similar to the one below on your command line interface.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/blog/media/2020-05-16-tests-local-run.png&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;We now have our tests running as expected.&lt;/p&gt;

&lt;h2&gt;Automating our testing&lt;/h2&gt;

&lt;p&gt;Our final task is to automate our continuous integration process. To achieve that, we will be doing the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add a configuration script to our project to set up a CI pipeline on CircleCI&lt;/li&gt;
  &lt;li&gt;Push our project to a GitHub repository&lt;/li&gt;
  &lt;li&gt;Create a CircleCI project for our application&lt;/li&gt;
  &lt;li&gt;Run the CI pipeline on CircleCI&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get to it.&lt;/p&gt;

&lt;p&gt;First, let’s add a configuration file for our CI pipeline to our project.&lt;/p&gt;

&lt;p&gt;At the root of your project, create a &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.circleci&lt;/code&gt; folder. Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.yml&lt;/code&gt; file, enter the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: 2.1
jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - run:
          name: update-npm
          command: &quot;sudo npm install -g npm@5&quot;
      - restore_cache:
          key: dependency-cache-{{ checksum &quot;package-lock.json&quot; }}
      - run:
          name: install-packages
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum &quot;package-lock.json&quot; }}
          paths:
            - ./node_modules
      - run:
          name: test
          command: npm run test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration pulls in a Node.js image and installs all the dependencies defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Once the installation is complete, the test script &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run test&lt;/code&gt; is then executed to run all the tests in our application.&lt;/p&gt;

&lt;p&gt;Our pipeline configuration file is good to go.&lt;/p&gt;

&lt;p&gt;Next, commit all your changes and push the project to a GitHub repository on the GitHub account connected to your CircleCI account.&lt;/p&gt;

&lt;p&gt;The next step is to set up the repository for our project as a CircleCI project.&lt;/p&gt;

&lt;p&gt;On the CircleCI console, go to the &lt;strong&gt;Add Projects&lt;/strong&gt; page to add the project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-16-add-project.png&quot; alt=&quot;Add Project&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Set Up Project&lt;/strong&gt;. This will load the next screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/start-building1.png&quot; alt=&quot;Start Building - Config sample&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the setup page, click &lt;strong&gt;Start Building&lt;/strong&gt;. Before the build starts, you get a prompt to either download and use the provided CircleCI configuration file and have it on a separate branch or set up one manually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-16-start-building2.png&quot; alt=&quot;Start Building - Add manually&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;strong&gt;Add Manually&lt;/strong&gt; to proceed. This will prompt another dialog that checks to confirm that you have a configuration file set up to begin building.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-16-start-building3.png&quot; alt=&quot;Start Building - Confirm configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Start Building&lt;/strong&gt; to complete the setup. This will immediately trigger the pipeline using the configuration file in our project.&lt;/p&gt;

&lt;p&gt;After the build is done running, you will get a successful build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-16-build-successful.png&quot; alt=&quot;Build successful&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;build&lt;/strong&gt; to see the behind-the-scenes process(I have collapsed the &lt;em&gt;test&lt;/em&gt; step).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/media/2020-05-16-build-process.png&quot; alt=&quot;Build process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see from the above screen, our project is properly set up and all our tests are running fine.&lt;/p&gt;

&lt;p&gt;Now, as you develop, all you have to do is add more features, add tests to them and push to GitHub. Once you push, the CI pipeline will run and all your tests will be executed. If any test fails, your build will fail which will indicate that there is a bug in your application to be fixed.&lt;/p&gt;

&lt;p&gt;This will ensure that you’re not pushing any bugs into your application.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this article, we have set up an automated CI pipeline for our Ionic applications to improve our development workflow by automating the testing process. Having a CI pipeline that properly runs our tests protects us against ourselves by ensuring that we don’t end up with broken applications or that we don’t push buggy code to our team’s repository while working together on a project.&lt;/p&gt;

&lt;p&gt;Happy coding :)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/coderonfleek?lang=en&quot;&gt;Fikayo&lt;/a&gt; is a fullstack developer and author with over a decade of experience developing web and mobile solutions. He is currently the Software Lead at Tech Specialist Consulting and develops courses for Packt and Udemy. He has a strong passion for teaching and hopes to become a full-time author.&lt;/p&gt;
</description>
        
      </item>
    
  </channel>
</rss>
